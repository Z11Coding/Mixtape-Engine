// Generated by Haxe 4.3.5
#ifndef INCLUDED_haxe__Int64_Int64_Impl_
#define INCLUDED_haxe__Int64_Int64_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,_Int64,Int64_Impl_)

namespace haxe{
namespace _Int64{


class HXCPP_CLASS_ATTRIBUTES Int64_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Int64_Impl__obj OBJ_;
		Int64_Impl__obj();

	public:
		enum { _hx_ClassId = 0x66145239 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe._Int64.Int64_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"haxe._Int64.Int64_Impl_"); }

		inline static ::hx::ObjectPtr< Int64_Impl__obj > __new() {
			::hx::ObjectPtr< Int64_Impl__obj > __this = new Int64_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Int64_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Int64_Impl__obj *__this = (Int64_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Int64_Impl__obj), false, "haxe._Int64.Int64_Impl_"));
			*(void **)__this = Int64_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Int64_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Int64_Impl_",2d,1a,59,c4); }

		static ::cpp::Int64 copy(::cpp::Int64 this1);
		static ::Dynamic copy_dyn();

		static ::cpp::Int64 make(int high,int low);
		static ::Dynamic make_dyn();

		static ::cpp::Int64 ofInt(int x);
		static ::Dynamic ofInt_dyn();

		static int toInt(::cpp::Int64 x);
		static ::Dynamic toInt_dyn();

		static bool is( ::Dynamic val);
		static ::Dynamic is_dyn();

		static bool isInt64( ::Dynamic val);
		static ::Dynamic isInt64_dyn();

		static int getHigh(::cpp::Int64 x);
		static ::Dynamic getHigh_dyn();

		static int getLow(::cpp::Int64 x);
		static ::Dynamic getLow_dyn();

		static bool isNeg(::cpp::Int64 x);
		static ::Dynamic isNeg_dyn();

		static bool isZero(::cpp::Int64 x);
		static ::Dynamic isZero_dyn();

		static int compare(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic compare_dyn();

		static int ucompare(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic ucompare_dyn();

		static ::String toStr(::cpp::Int64 x);
		static ::Dynamic toStr_dyn();

		static ::String toString(::cpp::Int64 this1);
		static ::Dynamic toString_dyn();

		static ::cpp::Int64 parseString(::String sParam);
		static ::Dynamic parseString_dyn();

		static ::cpp::Int64 fromFloat(Float f);
		static ::Dynamic fromFloat_dyn();

		static  ::Dynamic divMod(::cpp::Int64 dividend,::cpp::Int64 divisor);
		static ::Dynamic divMod_dyn();

		static ::cpp::Int64 neg(::cpp::Int64 x);
		static ::Dynamic neg_dyn();

		static ::cpp::Int64 preIncrement(::cpp::Int64 this1);
		static ::Dynamic preIncrement_dyn();

		static ::cpp::Int64 postIncrement(::cpp::Int64 this1);
		static ::Dynamic postIncrement_dyn();

		static ::cpp::Int64 preDecrement(::cpp::Int64 this1);
		static ::Dynamic preDecrement_dyn();

		static ::cpp::Int64 postDecrement(::cpp::Int64 this1);
		static ::Dynamic postDecrement_dyn();

		static ::cpp::Int64 add(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic add_dyn();

		static ::cpp::Int64 addInt(::cpp::Int64 a,int b);
		static ::Dynamic addInt_dyn();

		static ::cpp::Int64 sub(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic sub_dyn();

		static ::cpp::Int64 subInt(::cpp::Int64 a,int b);
		static ::Dynamic subInt_dyn();

		static ::cpp::Int64 intSub(int a,::cpp::Int64 b);
		static ::Dynamic intSub_dyn();

		static ::cpp::Int64 mul(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic mul_dyn();

		static ::cpp::Int64 mulInt(::cpp::Int64 a,int b);
		static ::Dynamic mulInt_dyn();

		static ::cpp::Int64 div(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic div_dyn();

		static ::cpp::Int64 divInt(::cpp::Int64 a,int b);
		static ::Dynamic divInt_dyn();

		static ::cpp::Int64 intDiv(int a,::cpp::Int64 b);
		static ::Dynamic intDiv_dyn();

		static ::cpp::Int64 mod(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic mod_dyn();

		static ::cpp::Int64 modInt(::cpp::Int64 a,int b);
		static ::Dynamic modInt_dyn();

		static ::cpp::Int64 intMod(int a,::cpp::Int64 b);
		static ::Dynamic intMod_dyn();

		static bool eq(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic eq_dyn();

		static bool eqInt(::cpp::Int64 a,int b);
		static ::Dynamic eqInt_dyn();

		static bool neq(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic neq_dyn();

		static bool neqInt(::cpp::Int64 a,int b);
		static ::Dynamic neqInt_dyn();

		static bool lt(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic lt_dyn();

		static bool ltInt(::cpp::Int64 a,int b);
		static ::Dynamic ltInt_dyn();

		static bool intLt(int a,::cpp::Int64 b);
		static ::Dynamic intLt_dyn();

		static bool lte(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic lte_dyn();

		static bool lteInt(::cpp::Int64 a,int b);
		static ::Dynamic lteInt_dyn();

		static bool intLte(int a,::cpp::Int64 b);
		static ::Dynamic intLte_dyn();

		static bool gt(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic gt_dyn();

		static bool gtInt(::cpp::Int64 a,int b);
		static ::Dynamic gtInt_dyn();

		static bool intGt(int a,::cpp::Int64 b);
		static ::Dynamic intGt_dyn();

		static bool gte(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic gte_dyn();

		static bool gteInt(::cpp::Int64 a,int b);
		static ::Dynamic gteInt_dyn();

		static bool intGte(int a,::cpp::Int64 b);
		static ::Dynamic intGte_dyn();

		static ::cpp::Int64 complement(::cpp::Int64 a);
		static ::Dynamic complement_dyn();

		static ::cpp::Int64 _hx_and(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic _hx_and_dyn();

		static ::cpp::Int64 _hx_or(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic _hx_or_dyn();

		static ::cpp::Int64 _hx_xor(::cpp::Int64 a,::cpp::Int64 b);
		static ::Dynamic _hx_xor_dyn();

		static ::cpp::Int64 shl(::cpp::Int64 a,int b);
		static ::Dynamic shl_dyn();

		static ::cpp::Int64 shr(::cpp::Int64 a,int b);
		static ::Dynamic shr_dyn();

		static ::cpp::Int64 ushr(::cpp::Int64 a,int b);
		static ::Dynamic ushr_dyn();

		static int get_high(::cpp::Int64 this1);
		static ::Dynamic get_high_dyn();

		static int get_low(::cpp::Int64 this1);
		static ::Dynamic get_low_dyn();

		static ::cpp::Int64 get_val(::cpp::Int64 this1);
		static ::Dynamic get_val_dyn();

};

} // end namespace haxe
} // end namespace _Int64

#endif /* INCLUDED_haxe__Int64_Int64_Impl_ */ 
