// Generated by Haxe 4.3.5
#include <hxcpp.h>

#ifndef INCLUDED__UnicodeString_UnicodeString_Impl_
#include <_UnicodeString/UnicodeString_Impl_.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_iterators_StringIteratorUnicode
#include <haxe/iterators/StringIteratorUnicode.h>
#endif
#ifndef INCLUDED_haxe_iterators_StringKeyValueIteratorUnicode
#include <haxe/iterators/StringKeyValueIteratorUnicode.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_45_validate,"_UnicodeString.UnicodeString_Impl_","validate",0x99875015,"_UnicodeString.UnicodeString_Impl_.validate","/usr/share/haxe/std/UnicodeString.hx",45,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_119__new,"_UnicodeString.UnicodeString_Impl_","_new",0x6b8f2960,"_UnicodeString.UnicodeString_Impl_._new","/usr/share/haxe/std/UnicodeString.hx",119,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_127_iterator,"_UnicodeString.UnicodeString_Impl_","iterator",0x283dc96d,"_UnicodeString.UnicodeString_Impl_.iterator","/usr/share/haxe/std/UnicodeString.hx",127,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_134_keyValueIterator,"_UnicodeString.UnicodeString_Impl_","keyValueIterator",0x236c63df,"_UnicodeString.UnicodeString_Impl_.keyValueIterator","/usr/share/haxe/std/UnicodeString.hx",134,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_149_charAt,"_UnicodeString.UnicodeString_Impl_","charAt",0xef11cb28,"_UnicodeString.UnicodeString_Impl_.charAt","/usr/share/haxe/std/UnicodeString.hx",149,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_172_charCodeAt,"_UnicodeString.UnicodeString_Impl_","charCodeAt",0xd9768435,"_UnicodeString.UnicodeString_Impl_.charCodeAt","/usr/share/haxe/std/UnicodeString.hx",172,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_205_indexOf,"_UnicodeString.UnicodeString_Impl_","indexOf",0x51ea7e2a,"_UnicodeString.UnicodeString_Impl_.indexOf","/usr/share/haxe/std/UnicodeString.hx",205,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_261_lastIndexOf,"_UnicodeString.UnicodeString_Impl_","lastIndexOf",0x8eb2f6f4,"_UnicodeString.UnicodeString_Impl_.lastIndexOf","/usr/share/haxe/std/UnicodeString.hx",261,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_320_substr,"_UnicodeString.UnicodeString_Impl_","substr",0xd1a740f0,"_UnicodeString.UnicodeString_Impl_.substr","/usr/share/haxe/std/UnicodeString.hx",320,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_375_substring,"_UnicodeString.UnicodeString_Impl_","substring",0x5d5401f2,"_UnicodeString.UnicodeString_Impl_.substring","/usr/share/haxe/std/UnicodeString.hx",375,0x68c6118b)
HX_LOCAL_STACK_FRAME(_hx_pos_2407e69e78391f9d_420_get_length,"_UnicodeString.UnicodeString_Impl_","get_length",0x33b0a1ee,"_UnicodeString.UnicodeString_Impl_.get_length","/usr/share/haxe/std/UnicodeString.hx",420,0x68c6118b)
namespace _UnicodeString{

void UnicodeString_Impl__obj::__construct() { }

Dynamic UnicodeString_Impl__obj::__CreateEmpty() { return new UnicodeString_Impl__obj; }

void *UnicodeString_Impl__obj::_hx_vtable = 0;

Dynamic UnicodeString_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UnicodeString_Impl__obj > _hx_result = new UnicodeString_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UnicodeString_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x699a1cff;
}

bool UnicodeString_Impl__obj::validate( ::haxe::io::Bytes b, ::haxe::io::Encoding encoding){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_45_validate)
HXDLIN(  45)		switch((int)(encoding->_hx_getIndex())){
            			case (int)0: {
HXLINE(  49)				::Array< unsigned char > data = b->b;
HXLINE(  50)				int pos = 0;
HXLINE(  51)				int max = b->length;
HXLINE(  52)				while((pos < max)){
HXLINE(  53)					pos = (pos + 1);
HXDLIN(  53)					int c = ( (int)(_hx_array_unsafe_get(data,(pos - 1))) );
HXLINE(  54)					if ((c >= 128)) {
HXLINE(  54)						if ((c < 194)) {
HXLINE(  55)							return false;
            						}
            						else {
HXLINE(  56)							if ((c < 224)) {
HXLINE(  57)								if (((pos + 1) > max)) {
HXLINE(  58)									return false;
            								}
HXLINE(  60)								pos = (pos + 1);
HXDLIN(  60)								int c2 = ( (int)(_hx_array_unsafe_get(data,(pos - 1))) );
HXLINE(  61)								bool _hx_tmp;
HXDLIN(  61)								if ((c2 >= 128)) {
HXLINE(  61)									_hx_tmp = (c2 > 191);
            								}
            								else {
HXLINE(  61)									_hx_tmp = true;
            								}
HXDLIN(  61)								if (_hx_tmp) {
HXLINE(  62)									return false;
            								}
            							}
            							else {
HXLINE(  64)								if ((c < 240)) {
HXLINE(  65)									if (((pos + 2) > max)) {
HXLINE(  66)										return false;
            									}
HXLINE(  68)									pos = (pos + 1);
HXDLIN(  68)									int c21 = ( (int)(_hx_array_unsafe_get(data,(pos - 1))) );
HXLINE(  69)									if ((c == 224)) {
HXLINE(  70)										bool _hx_tmp1;
HXDLIN(  70)										if ((c21 >= 160)) {
HXLINE(  70)											_hx_tmp1 = (c21 > 191);
            										}
            										else {
HXLINE(  70)											_hx_tmp1 = true;
            										}
HXDLIN(  70)										if (_hx_tmp1) {
HXLINE(  71)											return false;
            										}
            									}
            									else {
HXLINE(  73)										bool _hx_tmp2;
HXDLIN(  73)										if ((c21 >= 128)) {
HXLINE(  73)											_hx_tmp2 = (c21 > 191);
            										}
            										else {
HXLINE(  73)											_hx_tmp2 = true;
            										}
HXDLIN(  73)										if (_hx_tmp2) {
HXLINE(  74)											return false;
            										}
            									}
HXLINE(  76)									pos = (pos + 1);
HXDLIN(  76)									int c3 = ( (int)(_hx_array_unsafe_get(data,(pos - 1))) );
HXLINE(  77)									bool _hx_tmp3;
HXDLIN(  77)									if ((c3 >= 128)) {
HXLINE(  77)										_hx_tmp3 = (c3 > 191);
            									}
            									else {
HXLINE(  77)										_hx_tmp3 = true;
            									}
HXDLIN(  77)									if (_hx_tmp3) {
HXLINE(  78)										return false;
            									}
HXLINE(  80)									c = (((c << 16) | (c21 << 8)) | c3);
HXLINE(  81)									bool _hx_tmp4;
HXDLIN(  81)									if ((15573120 <= c)) {
HXLINE(  81)										_hx_tmp4 = (c <= 15581119);
            									}
            									else {
HXLINE(  81)										_hx_tmp4 = false;
            									}
HXDLIN(  81)									if (_hx_tmp4) {
HXLINE(  82)										return false;
            									}
            								}
            								else {
HXLINE(  84)									if ((c > 244)) {
HXLINE(  85)										return false;
            									}
            									else {
HXLINE(  87)										if (((pos + 3) > max)) {
HXLINE(  88)											return false;
            										}
HXLINE(  90)										pos = (pos + 1);
HXDLIN(  90)										int c22 = ( (int)(_hx_array_unsafe_get(data,(pos - 1))) );
HXLINE(  91)										if ((c == 240)) {
HXLINE(  92)											bool _hx_tmp5;
HXDLIN(  92)											if ((c22 >= 144)) {
HXLINE(  92)												_hx_tmp5 = (c22 > 191);
            											}
            											else {
HXLINE(  92)												_hx_tmp5 = true;
            											}
HXDLIN(  92)											if (_hx_tmp5) {
HXLINE(  93)												return false;
            											}
            										}
            										else {
HXLINE(  94)											if ((c == 244)) {
HXLINE(  95)												bool _hx_tmp6;
HXDLIN(  95)												if ((c22 >= 128)) {
HXLINE(  95)													_hx_tmp6 = (c22 > 143);
            												}
            												else {
HXLINE(  95)													_hx_tmp6 = true;
            												}
HXDLIN(  95)												if (_hx_tmp6) {
HXLINE(  96)													return false;
            												}
            											}
            											else {
HXLINE(  98)												bool _hx_tmp7;
HXDLIN(  98)												if ((c22 >= 128)) {
HXLINE(  98)													_hx_tmp7 = (c22 > 191);
            												}
            												else {
HXLINE(  98)													_hx_tmp7 = true;
            												}
HXDLIN(  98)												if (_hx_tmp7) {
HXLINE(  99)													return false;
            												}
            											}
            										}
HXLINE( 101)										pos = (pos + 1);
HXDLIN( 101)										int c31 = ( (int)(_hx_array_unsafe_get(data,(pos - 1))) );
HXLINE( 102)										bool _hx_tmp8;
HXDLIN( 102)										if ((c31 >= 128)) {
HXLINE( 102)											_hx_tmp8 = (c31 > 191);
            										}
            										else {
HXLINE( 102)											_hx_tmp8 = true;
            										}
HXDLIN( 102)										if (_hx_tmp8) {
HXLINE( 103)											return false;
            										}
HXLINE( 105)										pos = (pos + 1);
HXDLIN( 105)										int c4 = ( (int)(_hx_array_unsafe_get(data,(pos - 1))) );
HXLINE( 106)										bool _hx_tmp9;
HXDLIN( 106)										if ((c4 >= 128)) {
HXLINE( 106)											_hx_tmp9 = (c4 > 191);
            										}
            										else {
HXLINE( 106)											_hx_tmp9 = true;
            										}
HXDLIN( 106)										if (_hx_tmp9) {
HXLINE( 107)											return false;
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE( 111)				return true;
            			}
            			break;
            			case (int)1: {
HXLINE(  47)				HX_STACK_DO_THROW(HX_("UnicodeString.validate: RawNative encoding is not supported",3b,7e,05,48));
            			}
            			break;
            		}
HXLINE(  45)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UnicodeString_Impl__obj,validate,return )

::String UnicodeString_Impl__obj::_new(::String string){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_119__new)
HXDLIN( 119)		return string;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnicodeString_Impl__obj,_new,return )

 ::haxe::iterators::StringIteratorUnicode UnicodeString_Impl__obj::iterator(::String this1){
            	HX_GC_STACKFRAME(&_hx_pos_2407e69e78391f9d_127_iterator)
HXDLIN( 127)		return  ::haxe::iterators::StringIteratorUnicode_obj::__alloc( HX_CTX ,this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnicodeString_Impl__obj,iterator,return )

 ::haxe::iterators::StringKeyValueIteratorUnicode UnicodeString_Impl__obj::keyValueIterator(::String this1){
            	HX_GC_STACKFRAME(&_hx_pos_2407e69e78391f9d_134_keyValueIterator)
HXDLIN( 134)		return  ::haxe::iterators::StringKeyValueIteratorUnicode_obj::__alloc( HX_CTX ,this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnicodeString_Impl__obj,keyValueIterator,return )

::String UnicodeString_Impl__obj::charAt(::String this1,int index){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_149_charAt)
HXLINE( 150)		if ((index < 0)) {
HXLINE( 151)			return HX_("",00,00,00,00);
            		}
HXLINE( 152)		int unicodeOffset = 0;
HXLINE( 153)		int nativeOffset = 0;
HXLINE( 154)		while((nativeOffset < this1.length)){
HXLINE( 155)			nativeOffset = (nativeOffset + 1);
HXDLIN( 155)			int index1 = (nativeOffset - 1);
HXDLIN( 155)			int c = this1.cca(index1);
HXDLIN( 155)			bool _hx_tmp;
HXDLIN( 155)			if ((c >= 55296)) {
HXLINE( 155)				_hx_tmp = (c <= 56319);
            			}
            			else {
HXLINE( 155)				_hx_tmp = false;
            			}
HXDLIN( 155)			if (_hx_tmp) {
HXLINE( 155)				c = (((c - 55232) << 10) | (this1.cca((index1 + 1)) & 1023));
            			}
HXDLIN( 155)			int c1 = c;
HXLINE( 156)			if ((unicodeOffset == index)) {
HXLINE( 157)				return ::String::fromCharCode(c1);
            			}
HXLINE( 159)			if ((c1 >= 65536)) {
HXLINE( 160)				nativeOffset = (nativeOffset + 1);
            			}
HXLINE( 162)			unicodeOffset = (unicodeOffset + 1);
            		}
HXLINE( 164)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UnicodeString_Impl__obj,charAt,return )

 ::Dynamic UnicodeString_Impl__obj::charCodeAt(::String this1,int index){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_172_charCodeAt)
HXLINE( 173)		if ((index < 0)) {
HXLINE( 174)			return null();
            		}
HXLINE( 175)		int unicodeOffset = 0;
HXLINE( 176)		int nativeOffset = 0;
HXLINE( 177)		while((nativeOffset < this1.length)){
HXLINE( 178)			nativeOffset = (nativeOffset + 1);
HXDLIN( 178)			int index1 = (nativeOffset - 1);
HXDLIN( 178)			int c = this1.cca(index1);
HXDLIN( 178)			bool _hx_tmp;
HXDLIN( 178)			if ((c >= 55296)) {
HXLINE( 178)				_hx_tmp = (c <= 56319);
            			}
            			else {
HXLINE( 178)				_hx_tmp = false;
            			}
HXDLIN( 178)			if (_hx_tmp) {
HXLINE( 178)				c = (((c - 55232) << 10) | (this1.cca((index1 + 1)) & 1023));
            			}
HXDLIN( 178)			int c1 = c;
HXLINE( 179)			if ((unicodeOffset == index)) {
HXLINE( 180)				return c1;
            			}
HXLINE( 182)			if ((c1 >= 65536)) {
HXLINE( 183)				nativeOffset = (nativeOffset + 1);
            			}
HXLINE( 185)			unicodeOffset = (unicodeOffset + 1);
            		}
HXLINE( 187)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UnicodeString_Impl__obj,charCodeAt,return )

int UnicodeString_Impl__obj::indexOf(::String this1,::String str, ::Dynamic startIndex){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_205_indexOf)
HXLINE( 206)		if (::hx::IsNull( startIndex )) {
HXLINE( 207)			startIndex = 0;
            		}
            		else {
HXLINE( 209)			if (::hx::IsLess( startIndex,0 )) {
HXLINE( 210)				startIndex = (::_UnicodeString::UnicodeString_Impl__obj::get_length(this1) + startIndex);
            			}
            		}
HXLINE( 214)		int unicodeOffset = 0;
HXLINE( 215)		int nativeOffset = 0;
HXLINE( 216)		int matchingOffset = 0;
HXLINE( 217)		int result = -1;
HXLINE( 218)		while((nativeOffset <= this1.length)){
HXLINE( 219)			int c = this1.cca(nativeOffset);
HXDLIN( 219)			bool _hx_tmp;
HXDLIN( 219)			if ((c >= 55296)) {
HXLINE( 219)				_hx_tmp = (c <= 56319);
            			}
            			else {
HXLINE( 219)				_hx_tmp = false;
            			}
HXDLIN( 219)			if (_hx_tmp) {
HXLINE( 219)				c = (((c - 55232) << 10) | (this1.cca((nativeOffset + 1)) & 1023));
            			}
HXDLIN( 219)			int c1 = c;
HXLINE( 221)			if (::hx::IsGreaterEq( unicodeOffset,startIndex )) {
HXLINE( 222)				int c2 = str.cca(matchingOffset);
HXDLIN( 222)				bool _hx_tmp1;
HXDLIN( 222)				if ((c2 >= 55296)) {
HXLINE( 222)					_hx_tmp1 = (c2 <= 56319);
            				}
            				else {
HXLINE( 222)					_hx_tmp1 = false;
            				}
HXDLIN( 222)				if (_hx_tmp1) {
HXLINE( 222)					c2 = (((c2 - 55232) << 10) | (str.cca((matchingOffset + 1)) & 1023));
            				}
HXDLIN( 222)				int c21 = c2;
HXLINE( 223)				if ((c1 == c21)) {
HXLINE( 224)					if ((matchingOffset == 0)) {
HXLINE( 225)						result = unicodeOffset;
            					}
HXLINE( 227)					matchingOffset = (matchingOffset + 1);
HXLINE( 228)					if ((c21 >= 65536)) {
HXLINE( 229)						matchingOffset = (matchingOffset + 1);
            					}
HXLINE( 231)					if ((matchingOffset == str.length)) {
HXLINE( 232)						return result;
            					}
            				}
            				else {
HXLINE( 234)					if ((matchingOffset != 0)) {
HXLINE( 235)						result = -1;
HXLINE( 236)						matchingOffset = 0;
HXLINE( 237)						continue;
            					}
            				}
            			}
HXLINE( 241)			nativeOffset = (nativeOffset + 1);
HXLINE( 242)			if ((c1 >= 65536)) {
HXLINE( 243)				nativeOffset = (nativeOffset + 1);
            			}
HXLINE( 245)			unicodeOffset = (unicodeOffset + 1);
            		}
HXLINE( 247)		return -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UnicodeString_Impl__obj,indexOf,return )

int UnicodeString_Impl__obj::lastIndexOf(::String this1,::String str, ::Dynamic startIndex){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_261_lastIndexOf)
HXLINE( 262)		if (::hx::IsNull( startIndex )) {
HXLINE( 263)			startIndex = this1.length;
            		}
            		else {
HXLINE( 264)			if (::hx::IsLess( startIndex,0 )) {
HXLINE( 265)				startIndex = 0;
            			}
            		}
HXLINE( 268)		int unicodeOffset = 0;
HXLINE( 269)		int nativeOffset = 0;
HXLINE( 270)		int result = -1;
HXLINE( 271)		int lastIndex = -1;
HXLINE( 272)		int matchingOffset = 0;
HXLINE( 273)		int strUnicodeLength = ::_UnicodeString::UnicodeString_Impl__obj::get_length(str);
HXLINE( 274)		while(true){
HXLINE( 274)			bool _hx_tmp;
HXDLIN( 274)			if ((nativeOffset < this1.length)) {
HXLINE( 274)				_hx_tmp = (unicodeOffset < (startIndex + strUnicodeLength));
            			}
            			else {
HXLINE( 274)				_hx_tmp = false;
            			}
HXDLIN( 274)			if (!(_hx_tmp)) {
HXLINE( 274)				goto _hx_goto_11;
            			}
HXLINE( 275)			int c = this1.cca(nativeOffset);
HXDLIN( 275)			bool _hx_tmp1;
HXDLIN( 275)			if ((c >= 55296)) {
HXLINE( 275)				_hx_tmp1 = (c <= 56319);
            			}
            			else {
HXLINE( 275)				_hx_tmp1 = false;
            			}
HXDLIN( 275)			if (_hx_tmp1) {
HXLINE( 275)				c = (((c - 55232) << 10) | (this1.cca((nativeOffset + 1)) & 1023));
            			}
HXDLIN( 275)			int c1 = c;
HXLINE( 277)			int c2 = str.cca(matchingOffset);
HXDLIN( 277)			bool _hx_tmp2;
HXDLIN( 277)			if ((c2 >= 55296)) {
HXLINE( 277)				_hx_tmp2 = (c2 <= 56319);
            			}
            			else {
HXLINE( 277)				_hx_tmp2 = false;
            			}
HXDLIN( 277)			if (_hx_tmp2) {
HXLINE( 277)				c2 = (((c2 - 55232) << 10) | (str.cca((matchingOffset + 1)) & 1023));
            			}
HXDLIN( 277)			int c21 = c2;
HXLINE( 278)			if ((c1 == c21)) {
HXLINE( 279)				if ((matchingOffset == 0)) {
HXLINE( 280)					lastIndex = unicodeOffset;
            				}
HXLINE( 282)				matchingOffset = (matchingOffset + 1);
HXLINE( 283)				if ((c21 >= 65536)) {
HXLINE( 284)					matchingOffset = (matchingOffset + 1);
            				}
HXLINE( 286)				if ((matchingOffset == str.length)) {
HXLINE( 287)					result = lastIndex;
HXLINE( 288)					lastIndex = -1;
            				}
            			}
            			else {
HXLINE( 290)				if ((matchingOffset != 0)) {
HXLINE( 291)					lastIndex = -1;
HXLINE( 292)					matchingOffset = 0;
HXLINE( 293)					continue;
            				}
            			}
HXLINE( 296)			nativeOffset = (nativeOffset + 1);
HXLINE( 297)			if ((c1 >= 65536)) {
HXLINE( 298)				nativeOffset = (nativeOffset + 1);
            			}
HXLINE( 300)			unicodeOffset = (unicodeOffset + 1);
            		}
            		_hx_goto_11:;
HXLINE( 302)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UnicodeString_Impl__obj,lastIndexOf,return )

::String UnicodeString_Impl__obj::substr(::String this1,int pos, ::Dynamic len){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_320_substr)
HXLINE( 321)		if ((pos < 0)) {
HXLINE( 322)			pos = (::_UnicodeString::UnicodeString_Impl__obj::get_length(this1) + pos);
HXLINE( 323)			if ((pos < 0)) {
HXLINE( 324)				pos = 0;
            			}
            		}
HXLINE( 327)		if (::hx::IsNotNull( len )) {
HXLINE( 328)			if (::hx::IsLess( len,0 )) {
HXLINE( 329)				len = (::_UnicodeString::UnicodeString_Impl__obj::get_length(this1) + len);
            			}
HXLINE( 331)			if (::hx::IsLessEq( len,0 )) {
HXLINE( 332)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE( 335)		int unicodeOffset = 0;
HXLINE( 336)		int nativeOffset = 0;
HXLINE( 337)		int fromOffset = -1;
HXLINE( 338)		int subLength = 0;
HXLINE( 339)		while((nativeOffset < this1.length)){
HXLINE( 340)			int c = this1.cca(nativeOffset);
HXDLIN( 340)			bool _hx_tmp;
HXDLIN( 340)			if ((c >= 55296)) {
HXLINE( 340)				_hx_tmp = (c <= 56319);
            			}
            			else {
HXLINE( 340)				_hx_tmp = false;
            			}
HXDLIN( 340)			if (_hx_tmp) {
HXLINE( 340)				c = (((c - 55232) << 10) | (this1.cca((nativeOffset + 1)) & 1023));
            			}
HXDLIN( 340)			int c1 = c;
HXLINE( 342)			if ((unicodeOffset >= pos)) {
HXLINE( 343)				if ((fromOffset < 0)) {
HXLINE( 344)					if (::hx::IsNull( len )) {
HXLINE( 345)						return this1.substr(nativeOffset,null());
            					}
HXLINE( 347)					fromOffset = nativeOffset;
            				}
HXLINE( 349)				subLength = (subLength + 1);
HXLINE( 350)				if (::hx::IsGreaterEq( subLength,len )) {
HXLINE( 351)					int lastOffset;
HXDLIN( 351)					if ((c1 < 65536)) {
HXLINE( 351)						lastOffset = nativeOffset;
            					}
            					else {
HXLINE( 351)						lastOffset = (nativeOffset + 1);
            					}
HXLINE( 352)					return this1.substr(fromOffset,((lastOffset - fromOffset) + 1));
            				}
            			}
HXLINE( 356)			int nativeOffset1;
HXDLIN( 356)			if ((c1 >= 65536)) {
HXLINE( 356)				nativeOffset1 = 2;
            			}
            			else {
HXLINE( 356)				nativeOffset1 = 1;
            			}
HXDLIN( 356)			nativeOffset = (nativeOffset + nativeOffset1);
HXLINE( 357)			unicodeOffset = (unicodeOffset + 1);
            		}
HXLINE( 359)		if ((fromOffset < 0)) {
HXLINE( 359)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 359)			return this1.substr(fromOffset,null());
            		}
HXDLIN( 359)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UnicodeString_Impl__obj,substr,return )

::String UnicodeString_Impl__obj::substring(::String this1,int startIndex, ::Dynamic endIndex){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_375_substring)
HXLINE( 376)		if ((startIndex < 0)) {
HXLINE( 377)			startIndex = 0;
            		}
HXLINE( 379)		if (::hx::IsNotNull( endIndex )) {
HXLINE( 380)			if (::hx::IsLess( endIndex,0 )) {
HXLINE( 381)				endIndex = 0;
            			}
HXLINE( 383)			if (::hx::IsEq( startIndex,endIndex )) {
HXLINE( 384)				return HX_("",00,00,00,00);
            			}
HXLINE( 386)			if (::hx::IsGreater( startIndex,endIndex )) {
HXLINE( 387)				int tmp = startIndex;
HXLINE( 388)				startIndex = ( (int)(endIndex) );
HXLINE( 389)				endIndex = tmp;
            			}
            		}
HXLINE( 393)		int unicodeOffset = 0;
HXLINE( 394)		int nativeOffset = 0;
HXLINE( 395)		int fromOffset = -1;
HXLINE( 396)		int subLength = 0;
HXLINE( 397)		while((nativeOffset < this1.length)){
HXLINE( 398)			int c = this1.cca(nativeOffset);
HXDLIN( 398)			bool _hx_tmp;
HXDLIN( 398)			if ((c >= 55296)) {
HXLINE( 398)				_hx_tmp = (c <= 56319);
            			}
            			else {
HXLINE( 398)				_hx_tmp = false;
            			}
HXDLIN( 398)			if (_hx_tmp) {
HXLINE( 398)				c = (((c - 55232) << 10) | (this1.cca((nativeOffset + 1)) & 1023));
            			}
HXDLIN( 398)			int c1 = c;
HXLINE( 400)			if ((startIndex <= unicodeOffset)) {
HXLINE( 401)				if ((fromOffset < 0)) {
HXLINE( 402)					if (::hx::IsNull( endIndex )) {
HXLINE( 403)						return this1.substr(nativeOffset,null());
            					}
HXLINE( 405)					fromOffset = nativeOffset;
            				}
HXLINE( 407)				subLength = (subLength + 1);
HXLINE( 408)				if ((subLength >= (( (int)(endIndex) ) - startIndex))) {
HXLINE( 409)					int lastOffset;
HXDLIN( 409)					if ((c1 < 65536)) {
HXLINE( 409)						lastOffset = nativeOffset;
            					}
            					else {
HXLINE( 409)						lastOffset = (nativeOffset + 1);
            					}
HXLINE( 410)					return this1.substr(fromOffset,((lastOffset - fromOffset) + 1));
            				}
            			}
HXLINE( 414)			int nativeOffset1;
HXDLIN( 414)			if ((c1 >= 65536)) {
HXLINE( 414)				nativeOffset1 = 2;
            			}
            			else {
HXLINE( 414)				nativeOffset1 = 1;
            			}
HXDLIN( 414)			nativeOffset = (nativeOffset + nativeOffset1);
HXLINE( 415)			unicodeOffset = (unicodeOffset + 1);
            		}
HXLINE( 417)		if ((fromOffset < 0)) {
HXLINE( 417)			return HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 417)			return this1.substr(fromOffset,null());
            		}
HXDLIN( 417)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UnicodeString_Impl__obj,substring,return )

int UnicodeString_Impl__obj::get_length(::String this1){
            	HX_STACKFRAME(&_hx_pos_2407e69e78391f9d_420_get_length)
HXLINE( 421)		int l = 0;
HXLINE( 422)		{
HXLINE( 422)			int _g_offset = 0;
HXDLIN( 422)			while((_g_offset < this1.length)){
HXLINE( 422)				_g_offset = (_g_offset + 1);
HXDLIN( 422)				int index = (_g_offset - 1);
HXDLIN( 422)				int c = this1.cca(index);
HXDLIN( 422)				bool _hx_tmp;
HXDLIN( 422)				if ((c >= 55296)) {
HXLINE( 422)					_hx_tmp = (c <= 56319);
            				}
            				else {
HXLINE( 422)					_hx_tmp = false;
            				}
HXDLIN( 422)				if (_hx_tmp) {
HXLINE( 639)					c = (((c - 55232) << 10) | (this1.cca((index + 1)) & 1023));
            				}
HXLINE( 422)				if ((c >= 65536)) {
HXLINE( 422)					_g_offset = (_g_offset + 1);
            				}
HXLINE( 423)				l = (l + 1);
            			}
            		}
HXLINE( 425)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UnicodeString_Impl__obj,get_length,return )


UnicodeString_Impl__obj::UnicodeString_Impl__obj()
{
}

bool UnicodeString_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"charAt") ) { outValue = charAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substr") ) { outValue = substr_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { outValue = validate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterator") ) { outValue = iterator_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"substring") ) { outValue = substring_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charCodeAt") ) { outValue = charCodeAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { outValue = lastIndexOf_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyValueIterator") ) { outValue = keyValueIterator_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *UnicodeString_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *UnicodeString_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class UnicodeString_Impl__obj::__mClass;

static ::String UnicodeString_Impl__obj_sStaticFields[] = {
	HX_("validate",96,d0,e3,04),
	HX_("_new",61,15,1f,3f),
	HX_("iterator",ee,49,9a,93),
	HX_("keyValueIterator",60,cd,ee,4a),
	HX_("charAt",69,79,75,b7),
	HX_("charCodeAt",f6,e6,54,35),
	HX_("indexOf",c9,48,bf,e0),
	HX_("lastIndexOf",13,fd,6a,95),
	HX_("substr",31,ef,0a,9a),
	HX_("substring",51,f2,e7,e2),
	HX_("get_length",af,04,8f,8f),
	::String(null())
};

void UnicodeString_Impl__obj::__register()
{
	UnicodeString_Impl__obj _hx_dummy;
	UnicodeString_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("_UnicodeString.UnicodeString_Impl_",cf,cc,3a,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UnicodeString_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(UnicodeString_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< UnicodeString_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnicodeString_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnicodeString_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _UnicodeString
