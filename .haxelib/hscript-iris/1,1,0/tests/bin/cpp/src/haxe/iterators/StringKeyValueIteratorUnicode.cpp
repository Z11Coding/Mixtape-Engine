// Generated by Haxe 4.3.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_iterators_StringKeyValueIteratorUnicode
#include <haxe/iterators/StringKeyValueIteratorUnicode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3d248234ecafa60c_35_new,"haxe.iterators.StringKeyValueIteratorUnicode","new",0x7ae3356d,"haxe.iterators.StringKeyValueIteratorUnicode.new","/usr/share/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx",35,0x406d4e8a)
HX_LOCAL_STACK_FRAME(_hx_pos_3d248234ecafa60c_51_hasNext,"haxe.iterators.StringKeyValueIteratorUnicode","hasNext",0x7b2214fa,"haxe.iterators.StringKeyValueIteratorUnicode.hasNext","/usr/share/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx",51,0x406d4e8a)
HX_LOCAL_STACK_FRAME(_hx_pos_3d248234ecafa60c_58_next,"haxe.iterators.StringKeyValueIteratorUnicode","next",0x0beb8b46,"haxe.iterators.StringKeyValueIteratorUnicode.next","/usr/share/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx",58,0x406d4e8a)
HX_LOCAL_STACK_FRAME(_hx_pos_3d248234ecafa60c_74_unicodeKeyValueIterator,"haxe.iterators.StringKeyValueIteratorUnicode","unicodeKeyValueIterator",0x39171e2a,"haxe.iterators.StringKeyValueIteratorUnicode.unicodeKeyValueIterator","/usr/share/haxe/std/haxe/iterators/StringKeyValueIteratorUnicode.hx",74,0x406d4e8a)
namespace haxe{
namespace iterators{

void StringKeyValueIteratorUnicode_obj::__construct(::String s){
            	HX_STACKFRAME(&_hx_pos_3d248234ecafa60c_35_new)
HXLINE(  37)		this->charOffset = 0;
HXLINE(  36)		this->byteOffset = 0;
HXLINE(  44)		this->s = s;
            	}

Dynamic StringKeyValueIteratorUnicode_obj::__CreateEmpty() { return new StringKeyValueIteratorUnicode_obj; }

void *StringKeyValueIteratorUnicode_obj::_hx_vtable = 0;

Dynamic StringKeyValueIteratorUnicode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringKeyValueIteratorUnicode_obj > _hx_result = new StringKeyValueIteratorUnicode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StringKeyValueIteratorUnicode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x389047ed;
}

bool StringKeyValueIteratorUnicode_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_3d248234ecafa60c_51_hasNext)
HXDLIN(  51)		return (this->byteOffset < this->s.length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringKeyValueIteratorUnicode_obj,hasNext,return )

 ::Dynamic StringKeyValueIteratorUnicode_obj::next(){
            	HX_STACKFRAME(&_hx_pos_3d248234ecafa60c_58_next)
HXLINE(  60)		::String s = this->s;
HXDLIN(  60)		int index = this->byteOffset++;
HXDLIN(  60)		int c = s.cca(index);
HXDLIN(  60)		bool _hx_tmp;
HXDLIN(  60)		if ((c >= 55296)) {
HXLINE(  60)			_hx_tmp = (c <= 56319);
            		}
            		else {
HXLINE(  60)			_hx_tmp = false;
            		}
HXDLIN(  60)		if (_hx_tmp) {
HXLINE(  60)			c = (((c - 55232) << 10) | (s.cca((index + 1)) & 1023));
            		}
HXDLIN(  60)		int c1 = c;
HXLINE(  61)		if ((c1 >= 65536)) {
HXLINE(  62)			this->byteOffset++;
            		}
HXLINE(  64)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("key",9f,89,51,00),this->charOffset++)
            			->setFixed(1,HX_("value",71,7f,b8,31),c1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringKeyValueIteratorUnicode_obj,next,return )

 ::haxe::iterators::StringKeyValueIteratorUnicode StringKeyValueIteratorUnicode_obj::unicodeKeyValueIterator(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_3d248234ecafa60c_74_unicodeKeyValueIterator)
HXDLIN(  74)		return  ::haxe::iterators::StringKeyValueIteratorUnicode_obj::__alloc( HX_CTX ,s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringKeyValueIteratorUnicode_obj,unicodeKeyValueIterator,return )


StringKeyValueIteratorUnicode_obj::StringKeyValueIteratorUnicode_obj()
{
}

void StringKeyValueIteratorUnicode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringKeyValueIteratorUnicode);
	HX_MARK_MEMBER_NAME(byteOffset,"byteOffset");
	HX_MARK_MEMBER_NAME(charOffset,"charOffset");
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_END_CLASS();
}

void StringKeyValueIteratorUnicode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(byteOffset,"byteOffset");
	HX_VISIT_MEMBER_NAME(charOffset,"charOffset");
	HX_VISIT_MEMBER_NAME(s,"s");
}

::hx::Val StringKeyValueIteratorUnicode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return ::hx::Val( s ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return ::hx::Val( hasNext_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { return ::hx::Val( byteOffset ); }
		if (HX_FIELD_EQ(inName,"charOffset") ) { return ::hx::Val( charOffset ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StringKeyValueIteratorUnicode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 23:
		if (HX_FIELD_EQ(inName,"unicodeKeyValueIterator") ) { outValue = unicodeKeyValueIterator_dyn(); return true; }
	}
	return false;
}

::hx::Val StringKeyValueIteratorUnicode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { byteOffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"charOffset") ) { charOffset=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringKeyValueIteratorUnicode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("byteOffset",bb,20,44,38));
	outFields->push(HX_("charOffset",09,2f,5f,d4));
	outFields->push(HX_("s",73,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StringKeyValueIteratorUnicode_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(StringKeyValueIteratorUnicode_obj,byteOffset),HX_("byteOffset",bb,20,44,38)},
	{::hx::fsInt,(int)offsetof(StringKeyValueIteratorUnicode_obj,charOffset),HX_("charOffset",09,2f,5f,d4)},
	{::hx::fsString,(int)offsetof(StringKeyValueIteratorUnicode_obj,s),HX_("s",73,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StringKeyValueIteratorUnicode_obj_sStaticStorageInfo = 0;
#endif

static ::String StringKeyValueIteratorUnicode_obj_sMemberFields[] = {
	HX_("byteOffset",bb,20,44,38),
	HX_("charOffset",09,2f,5f,d4),
	HX_("s",73,00,00,00),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	::String(null()) };

::hx::Class StringKeyValueIteratorUnicode_obj::__mClass;

static ::String StringKeyValueIteratorUnicode_obj_sStaticFields[] = {
	HX_("unicodeKeyValueIterator",9d,04,e3,57),
	::String(null())
};

void StringKeyValueIteratorUnicode_obj::__register()
{
	StringKeyValueIteratorUnicode_obj _hx_dummy;
	StringKeyValueIteratorUnicode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.iterators.StringKeyValueIteratorUnicode",fb,fa,8e,4a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringKeyValueIteratorUnicode_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StringKeyValueIteratorUnicode_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StringKeyValueIteratorUnicode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StringKeyValueIteratorUnicode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringKeyValueIteratorUnicode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringKeyValueIteratorUnicode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace iterators
