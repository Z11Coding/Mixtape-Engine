// Generated by Haxe 4.3.5
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Util
#include <Util.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Bytes
#include <crowplexus/hscript/Bytes.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Expr
#include <crowplexus/hscript/Expr.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Parser
#include <crowplexus/hscript/Parser.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Printer
#include <crowplexus/hscript/Printer.h>
#endif
#ifndef INCLUDED_crowplexus_iris_InitRules
#include <crowplexus/iris/InitRules.h>
#endif
#ifndef INCLUDED_crowplexus_iris_Iris
#include <crowplexus/iris/Iris.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_16_main,"Main","main",0xed0e206e,"Main.main","Main.hx",16,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_24_mainTest,"Main","mainTest",0xec84e3e0,"Main.mainTest","Main.hx",24,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_41_mainBytes,"Main","mainBytes",0xb7c5091d,"Main.mainBytes","Main.hx",41,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_62_testIndenticalNames,"Main","testIndenticalNames",0x54c13790,"Main.testIndenticalNames","Main.hx",62,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_73_fullTestParseEntireSourceCode,"Main","fullTestParseEntireSourceCode",0x37660696,"Main.fullTestParseEntireSourceCode","Main.hx",73,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_70_fullTestParseEntireSourceCode,"Main","fullTestParseEntireSourceCode",0x37660696,"Main.fullTestParseEntireSourceCode","Main.hx",70,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_16_main)
HXDLIN(  16)		::Main_obj::mainTest();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

void Main_obj::mainTest(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_24_mainTest)
HXLINE(  25)		::haxe::Log_obj::trace(HX_("Hello World!",1d,bd,9b,70),::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),25,HX_("Main",59,64,2f,33),HX_("mainTest",2b,3d,7c,a5)));
HXLINE(  27)		 ::crowplexus::iris::Iris myScript =  ::crowplexus::iris::Iris_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(HX_("./assets/test.hx",e1,a8,da,c0)),null());
HXLINE(  28)		myScript->execute();
HXLINE(  30)		 ::Dynamic result = myScript->call(HX_("main",39,38,56,48),null());
HXLINE(  31)		::haxe::Log_obj::trace(result,::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),31,HX_("Main",59,64,2f,33),HX_("mainTest",2b,3d,7c,a5)));
HXLINE(  34)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  34)		::String _hx_tmp1 =  ::crowplexus::hscript::Printer_obj::__alloc( HX_CTX )->exprToString(myScript->expr);
HXDLIN(  34)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),34,HX_("Main",59,64,2f,33),HX_("mainTest",2b,3d,7c,a5)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,mainTest,(void))

void Main_obj::mainBytes(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_41_mainBytes)
HXLINE(  42)		::String myScript = ::sys::io::File_obj::getContent(HX_("./assets/bytes.hx",5e,ae,62,29));
HXDLIN(  42)		 ::crowplexus::iris::Iris myScript1 =  ::crowplexus::iris::Iris_obj::__alloc( HX_CTX ,myScript, ::crowplexus::iris::InitRules_obj::__alloc( HX_CTX ,HX_("bytes",6b,08,98,bd),false,false));
HXLINE(  47)		myScript1->parse();
HXLINE(  49)		 ::haxe::io::Bytes bytes = ::crowplexus::hscript::Bytes_obj::encode(myScript1->expr);
HXLINE(  51)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  51)		::String _hx_tmp1 = ::Util_obj::getEscapedString(bytes->toString());
HXDLIN(  51)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),51,HX_("Main",59,64,2f,33),HX_("mainBytes",72,d1,3b,d7)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,mainBytes,(void))

void Main_obj::testIndenticalNames(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_62_testIndenticalNames)
HXLINE(  63)		 ::crowplexus::iris::Iris_obj::__alloc( HX_CTX ,HX_("trace(\"Hello World!\");",b8,95,c7,a0), ::crowplexus::iris::InitRules_obj::__alloc( HX_CTX ,HX_("script",0b,4e,60,47),null(),null()))->execute();
HXLINE(  64)		 ::crowplexus::iris::Iris_obj::__alloc( HX_CTX ,HX_("trace(\"A!\");",b5,fe,b5,c8), ::crowplexus::iris::InitRules_obj::__alloc( HX_CTX ,HX_("script",0b,4e,60,47),null(),null()))->execute();
HXLINE(  65)		 ::crowplexus::iris::Iris_obj::__alloc( HX_CTX ,HX_("trace(\"B!\");",36,93,1c,5c), ::crowplexus::iris::InitRules_obj::__alloc( HX_CTX ,HX_("script",0b,4e,60,47),null(),null()))->execute();
HXLINE(  66)		 ::crowplexus::iris::Iris_obj::__alloc( HX_CTX ,HX_("trace(\"C!\");",b7,27,83,ef), ::crowplexus::iris::InitRules_obj::__alloc( HX_CTX ,HX_("script",0b,4e,60,47),null(),null()))->execute();
HXLINE(  67)		::haxe::Log_obj::trace(::crowplexus::iris::Iris_obj::instances,::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),67,HX_("Main",59,64,2f,33),HX_("testIndenticalNames",25,9c,5b,31)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,testIndenticalNames,(void))

void Main_obj::fullTestParseEntireSourceCode(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,recursiveFinder,::Array< ::String >,hxfiles) HXARGC(1)
            		void _hx_run(::String path){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_73_fullTestParseEntireSourceCode)
HXLINE(  74)			::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(path);
HXLINE(  75)			{
HXLINE(  75)				int _g = 0;
HXDLIN(  75)				while((_g < files->length)){
HXLINE(  75)					::String file = files->__get(_g);
HXDLIN(  75)					_g = (_g + 1);
HXLINE(  76)					::String filePath = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,path)->init(1,file));
HXLINE(  77)					if (::sys::FileSystem_obj::isDirectory(filePath)) {
HXLINE(  78)						recursiveFinder->__get(0)(filePath);
            					}
            					else {
HXLINE(  79)						if (::StringTools_obj::endsWith(file,HX_(".hx",be,42,23,00))) {
HXLINE(  80)							hxfiles->push(filePath);
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_70_fullTestParseEntireSourceCode)
HXLINE(  71)		::Array< ::String > hxfiles = ::Array_obj< ::String >::__new(0);
HXLINE(  73)		::Array< ::Dynamic> recursiveFinder = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  73)		recursiveFinder[0] =  ::Dynamic(new _hx_Closure_0(recursiveFinder,hxfiles));
HXLINE(  85)		::String root = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(4)->init(0,::Sys_obj::getCwd())->init(1,HX_("..",40,28,00,00))->init(2,HX_("..",40,28,00,00))->init(3,HX_("..",40,28,00,00)));
HXLINE(  87)		recursiveFinder->__get(0)(root);
HXLINE(  88)		{
HXLINE(  88)			int _g = 0;
HXDLIN(  88)			while((_g < hxfiles->length)){
HXLINE(  88)				::String file = hxfiles->__get(_g);
HXDLIN(  88)				_g = (_g + 1);
HXLINE(  89)				::Sys_obj::println(file);
HXLINE(  90)				 ::crowplexus::hscript::Parser parser =  ::crowplexus::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE(  91)				 ::crowplexus::hscript::Expr tokens = parser->parseString(::sys::io::File_obj::getContent(file),null());
HXLINE(  92)				::haxe::Log_obj::trace(tokens,::hx::SourceInfo(HX_("src/Main.hx",9a,7a,30,a1),92,HX_("Main",59,64,2f,33),HX_("fullTestParseEntireSourceCode",6b,d7,d9,7b)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,fullTestParseEntireSourceCode,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mainTest") ) { outValue = mainTest_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mainBytes") ) { outValue = mainBytes_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testIndenticalNames") ) { outValue = testIndenticalNames_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"fullTestParseEntireSourceCode") ) { outValue = fullTestParseEntireSourceCode_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	HX_("mainTest",2b,3d,7c,a5),
	HX_("mainBytes",72,d1,3b,d7),
	HX_("testIndenticalNames",25,9c,5b,31),
	HX_("fullTestParseEntireSourceCode",6b,d7,d9,7b),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

