// Generated by Haxe 4.3.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Util
#include <Util.h>
#endif
#ifndef INCLUDED__UnicodeString_UnicodeString_Impl_
#include <_UnicodeString/UnicodeString_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_10_getTime,"Util","getTime",0x7c4b7377,"Util.getTime","Util.hx",10,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_13_repeatString,"Util","repeatString",0xc41f4658,"Util.repeatString","Util.hx",13,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_21_exScienceN,"Util","exScienceN",0xf967aa89,"Util.exScienceN","Util.hx",21,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_42_convertToReadableTime,"Util","convertToReadableTime",0x2077ca3f,"Util.convertToReadableTime","Util.hx",42,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_55_roundDecimal,"Util","roundDecimal",0x3afe45af,"Util.roundDecimal","Util.hx",55,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_63_roundWith,"Util","roundWith",0xa8552628,"Util.roundWith","Util.hx",63,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_66_isJson,"Util","isJson",0x6e8e81fe,"Util.isJson","Util.hx",66,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_85_isPrintable,"Util","isPrintable",0x70bc78b1,"Util.isPrintable","Util.hx",85,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_88_hexLower,"Util","hexLower",0x8123b2f2,"Util.hexLower","Util.hx",88,0xec9f7fdc)
HX_LOCAL_STACK_FRAME(_hx_pos_e5af7e1b599c4aa9_115_getEscapedString,"Util","getEscapedString",0xc8d0ba4a,"Util.getEscapedString","Util.hx",115,0xec9f7fdc)
static const ::String _hx_array_data_38878422_17[] = {
	HX_("\\u{",c2,35,46,00),
};
static const ::String _hx_array_data_38878422_18[] = {
	HX_("}",7d,00,00,00),
};
static const ::String _hx_array_data_38878422_19[] = {
	HX_("\\x",9c,50,00,00),
};
static const ::String _hx_array_data_38878422_20[] = {
	HX_("\\t",98,50,00,00),
};
static const ::String _hx_array_data_38878422_21[] = {
	HX_("\\n",92,50,00,00),
};
static const ::String _hx_array_data_38878422_22[] = {
	HX_("\\r",96,50,00,00),
};
static const ::String _hx_array_data_38878422_23[] = {
	HX_("\\\"",46,50,00,00),
};
static const ::String _hx_array_data_38878422_24[] = {
	HX_("\\\\",80,50,00,00),
};
static const ::String _hx_array_data_38878422_25[] = {
	HX_("\\u{",c2,35,46,00),
};
static const ::String _hx_array_data_38878422_26[] = {
	HX_("}",7d,00,00,00),
};
static const ::String _hx_array_data_38878422_27[] = {
	HX_("\\x",9c,50,00,00),
};

void Util_obj::__construct() { }

Dynamic Util_obj::__CreateEmpty() { return new Util_obj; }

void *Util_obj::_hx_vtable = 0;

Dynamic Util_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Util_obj > _hx_result = new Util_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Util_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cda7a46;
}

Float Util_obj::getTime(){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_10_getTime)
HXDLIN(  10)		return  ::__time_stamp();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Util_obj,getTime,return )

::String Util_obj::repeatString(::String str,int times){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_13_repeatString)
HXLINE(  14)		::String result = HX_("",00,00,00,00);
HXLINE(  15)		{
HXLINE(  15)			int _g = 0;
HXDLIN(  15)			while((_g < times)){
HXLINE(  15)				_g = (_g + 1);
HXLINE(  16)				result = (result + str);
            			}
            		}
HXLINE(  17)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,repeatString,return )

::String Util_obj::exScienceN(Float value){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_21_exScienceN)
HXLINE(  22)		::Array< ::String > parts = ::Std_obj::string(value).split(HX_("e",65,00,00,00));
HXLINE(  23)		Float coefficient = ::Std_obj::parseFloat(parts->__get(0));
HXLINE(  24)		 ::Dynamic exponent;
HXDLIN(  24)		if ((parts->length > 1)) {
HXLINE(  24)			exponent = ::Std_obj::parseInt(parts->__get(1));
            		}
            		else {
HXLINE(  24)			exponent = 0;
            		}
HXLINE(  25)		::String result = HX_("",00,00,00,00);
HXLINE(  27)		if (::hx::IsGreater( exponent,0 )) {
HXLINE(  28)			result = (HX_("",00,00,00,00) + ::StringTools_obj::replace(::Std_obj::string(coefficient),HX_(".",2e,00,00,00),HX_("",00,00,00,00)));
HXLINE(  29)			int decimalLength = ::Std_obj::string(coefficient).split(HX_(".",2e,00,00,00))->__get(1).length;
HXLINE(  31)			result = (result + ::Util_obj::repeatString(HX_("0",30,00,00,00),::Std_obj::_hx_int(::Math_obj::abs(( (Float)((( (int)(exponent) ) - decimalLength)) )))));
            		}
            		else {
HXLINE(  33)			result = HX_("0.",fe,29,00,00);
HXLINE(  35)			result = (HX_("0.",fe,29,00,00) + ::Util_obj::repeatString(HX_("0",30,00,00,00),::Std_obj::_hx_int((::Math_obj::abs(( (Float)(exponent) )) - ( (Float)(1) )))));
HXLINE(  36)			result = (result + ::StringTools_obj::replace(::Std_obj::string(coefficient),HX_(".",2e,00,00,00),HX_("",00,00,00,00)));
            		}
HXLINE(  39)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Util_obj,exScienceN,return )

::String Util_obj::convertToReadableTime(Float seconds){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_42_convertToReadableTime)
HXLINE(  43)		if ((seconds >= 1)) {
HXLINE(  44)			return (seconds + HX_(" s",53,1c,00,00));
            		}
HXLINE(  45)		Float milliseconds = (seconds * ( (Float)(1000) ));
HXLINE(  46)		if ((milliseconds >= 1)) {
HXLINE(  47)			return (milliseconds + HX_(" ms",86,a7,18,00));
            		}
HXLINE(  48)		Float microseconds = (seconds * ( (Float)(1000000) ));
HXLINE(  49)		if ((microseconds >= 1)) {
HXLINE(  50)			return (microseconds + HX_W(u" \u03bcs",c865,15c3));
            		}
HXLINE(  52)		return ((seconds * ( (Float)((int)1000000000) )) + HX_(" ns",65,a8,18,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Util_obj,convertToReadableTime,return )

Float Util_obj::roundDecimal(Float Value,int Precision){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_55_roundDecimal)
HXLINE(  56)		Float mult = ( (Float)(1) );
HXLINE(  57)		{
HXLINE(  57)			int _g = 0;
HXDLIN(  57)			while((_g < Precision)){
HXLINE(  57)				_g = (_g + 1);
HXLINE(  58)				mult = (mult * ( (Float)(10) ));
            			}
            		}
HXLINE(  59)		return (::Math_obj::fround((Value * mult)) / mult);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,roundDecimal,return )

Float Util_obj::roundWith(Float Value,int Mult){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_63_roundWith)
HXDLIN(  63)		return (::Math_obj::fround((Value * ( (Float)(Mult) ))) / ( (Float)(Mult) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,roundWith,return )

bool Util_obj::isJson(::String s){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_66_isJson)
HXLINE(  67)		int len = s.length;
HXLINE(  68)		int i = 0;
HXLINE(  69)		while((i < len)){
HXLINE(  70)			i = (i + 1);
HXDLIN(  70)			int c = s.cca((i - 1));
HXLINE(  71)			bool _hx_tmp;
HXDLIN(  71)			if ((c >= 97)) {
HXLINE(  71)				_hx_tmp = (c <= 122);
            			}
            			else {
HXLINE(  71)				_hx_tmp = false;
            			}
HXDLIN(  71)			if (_hx_tmp) {
HXLINE(  72)				continue;
            			}
HXLINE(  73)			bool _hx_tmp1;
HXDLIN(  73)			if ((c >= 65)) {
HXLINE(  73)				_hx_tmp1 = (c <= 90);
            			}
            			else {
HXLINE(  73)				_hx_tmp1 = false;
            			}
HXDLIN(  73)			if (_hx_tmp1) {
HXLINE(  74)				continue;
            			}
HXLINE(  75)			bool _hx_tmp2;
HXDLIN(  75)			if ((c >= 48)) {
HXLINE(  75)				_hx_tmp2 = (c <= 57);
            			}
            			else {
HXLINE(  75)				_hx_tmp2 = false;
            			}
HXDLIN(  75)			if (_hx_tmp2) {
HXLINE(  76)				continue;
            			}
HXLINE(  77)			if ((c == 95)) {
HXLINE(  78)				continue;
            			}
HXLINE(  79)			return false;
            		}
HXLINE(  81)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Util_obj,isJson,return )

bool Util_obj::isPrintable(int c){
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_85_isPrintable)
HXDLIN(  85)		if ((c >= 32)) {
HXDLIN(  85)			return (c <= 126);
            		}
            		else {
HXDLIN(  85)			return false;
            		}
HXDLIN(  85)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Util_obj,isPrintable,return )

::String Util_obj::hexLower(int n,::hx::Null< int >  __o_digits){
            		int digits = __o_digits.Default(-1);
            	HX_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_88_hexLower)
HXLINE(  94)		::String s = HX_("",00,00,00,00);
HXLINE(  96)		do {
HXLINE(  97)			s = (HX_("0123456789abcdef",68,7e,d5,ef).charAt((n & 15)) + s);
HXLINE(  98)			n = ::hx::UShr(n,4);
            		} while((n > 0));
;
HXLINE( 108)		if ((digits != -1)) {
HXLINE( 109)			while((s.length < digits)){
HXLINE( 110)				s = (HX_("0",30,00,00,00) + s);
            			}
            		}
HXLINE( 112)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,hexLower,return )

::String Util_obj::getEscapedString(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_e5af7e1b599c4aa9_115_getEscapedString)
HXLINE( 116)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 118)		::String s1 = s;
HXLINE( 120)		{
HXLINE( 120)			int _g = 0;
HXDLIN( 120)			int _g1 = ::_UnicodeString::UnicodeString_Impl__obj::get_length(s1);
HXDLIN( 120)			while((_g < _g1)){
HXLINE( 120)				_g = (_g + 1);
HXLINE( 122)				 ::Dynamic c = ::_UnicodeString::UnicodeString_Impl__obj::charCodeAt(s1,(_g - 1));
HXLINE( 126)				if (::hx::IsNull( c )) {
HXLINE( 138)					if (::hx::IsNull( c )) {
HXLINE( 139)						continue;
            					}
HXLINE( 140)					bool _hx_tmp;
HXDLIN( 140)					int c1 = ( (int)(c) );
HXDLIN( 140)					if ((c1 >= 32)) {
HXLINE( 140)						_hx_tmp = (c1 <= 126);
            					}
            					else {
HXLINE( 140)						_hx_tmp = false;
            					}
HXDLIN( 140)					if (_hx_tmp) {
HXLINE( 141)						int c2 = ( (int)(c) );
HXDLIN( 141)						if ((c2 >= 127)) {
HXLINE( 141)							::String x = ::String::fromCharCode(c2);
HXDLIN( 141)							if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 141)								buf->flush();
            							}
HXDLIN( 141)							if (::hx::IsNull( buf->b )) {
HXLINE( 141)								buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            							}
            							else {
HXLINE( 141)								::Array< ::String > buf1 = buf->b;
HXDLIN( 141)								buf1->push(::Std_obj::string(x));
            							}
            						}
            						else {
HXLINE( 141)							if (::hx::IsNull( buf->charBuf )) {
HXLINE( 141)								buf->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 141)							buf->charBuf->push(c2);
            						}
            					}
            					else {
HXLINE( 143)						if (::hx::IsGreater( c,255 )) {
HXLINE( 144)							{
HXLINE( 144)								if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 144)									buf->flush();
            								}
HXDLIN( 144)								if (::hx::IsNull( buf->b )) {
HXLINE( 144)									buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_17,1);
            								}
            								else {
HXLINE( 144)									buf->b->push(HX_("\\u{",c2,35,46,00));
            								}
            							}
HXLINE( 145)							{
HXLINE( 145)								::String x1 = ::Util_obj::hexLower(( (int)(c) ),2);
HXDLIN( 145)								if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 145)									buf->flush();
            								}
HXDLIN( 145)								if (::hx::IsNull( buf->b )) {
HXLINE( 145)									buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            								}
            								else {
HXLINE( 145)									::Array< ::String > buf2 = buf->b;
HXDLIN( 145)									buf2->push(::Std_obj::string(x1));
            								}
            							}
HXLINE( 146)							{
HXLINE( 146)								if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 146)									buf->flush();
            								}
HXDLIN( 146)								if (::hx::IsNull( buf->b )) {
HXLINE( 146)									buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_18,1);
            								}
            								else {
HXLINE( 146)									buf->b->push(HX_("}",7d,00,00,00));
            								}
            							}
            						}
            						else {
HXLINE( 148)							{
HXLINE( 148)								if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 148)									buf->flush();
            								}
HXDLIN( 148)								if (::hx::IsNull( buf->b )) {
HXLINE( 148)									buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_19,1);
            								}
            								else {
HXLINE( 148)									buf->b->push(HX_("\\x",9c,50,00,00));
            								}
            							}
HXLINE( 149)							{
HXLINE( 149)								::String x2 = ::Util_obj::hexLower((( (int)(c) ) & 255),2);
HXDLIN( 149)								if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 149)									buf->flush();
            								}
HXDLIN( 149)								if (::hx::IsNull( buf->b )) {
HXLINE( 149)									buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            								}
            								else {
HXLINE( 149)									::Array< ::String > buf3 = buf->b;
HXDLIN( 149)									buf3->push(::Std_obj::string(x2));
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 126)					 ::Dynamic _hx_switch_0 = c;
            					if (  (_hx_switch_0==9) ){
HXLINE( 136)						if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 136)							buf->flush();
            						}
HXDLIN( 136)						if (::hx::IsNull( buf->b )) {
HXLINE( 136)							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_20,1);
            						}
            						else {
HXLINE( 136)							buf->b->push(HX_("\\t",98,50,00,00));
            						}
HXDLIN( 136)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_0==10) ){
HXLINE( 132)						if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 132)							buf->flush();
            						}
HXDLIN( 132)						if (::hx::IsNull( buf->b )) {
HXLINE( 132)							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_21,1);
            						}
            						else {
HXLINE( 132)							buf->b->push(HX_("\\n",92,50,00,00));
            						}
HXDLIN( 132)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_0==13) ){
HXLINE( 134)						if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 134)							buf->flush();
            						}
HXDLIN( 134)						if (::hx::IsNull( buf->b )) {
HXLINE( 134)							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_22,1);
            						}
            						else {
HXLINE( 134)							buf->b->push(HX_("\\r",96,50,00,00));
            						}
HXDLIN( 134)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_0==34) ){
HXLINE( 128)						if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 128)							buf->flush();
            						}
HXDLIN( 128)						if (::hx::IsNull( buf->b )) {
HXLINE( 128)							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_23,1);
            						}
            						else {
HXLINE( 128)							buf->b->push(HX_("\\\"",46,50,00,00));
            						}
HXDLIN( 128)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_0==92) ){
HXLINE( 130)						if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 130)							buf->flush();
            						}
HXDLIN( 130)						if (::hx::IsNull( buf->b )) {
HXLINE( 130)							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_24,1);
            						}
            						else {
HXLINE( 130)							buf->b->push(HX_("\\\\",80,50,00,00));
            						}
HXDLIN( 130)						goto _hx_goto_15;
            					}
            					/* default */{
HXLINE( 138)						if (::hx::IsNull( c )) {
HXLINE( 139)							continue;
            						}
HXLINE( 140)						bool _hx_tmp1;
HXDLIN( 140)						int c3 = ( (int)(c) );
HXDLIN( 140)						if ((c3 >= 32)) {
HXLINE( 140)							_hx_tmp1 = (c3 <= 126);
            						}
            						else {
HXLINE( 140)							_hx_tmp1 = false;
            						}
HXDLIN( 140)						if (_hx_tmp1) {
HXLINE( 141)							int c4 = ( (int)(c) );
HXDLIN( 141)							if ((c4 >= 127)) {
HXLINE( 141)								::String x3 = ::String::fromCharCode(c4);
HXDLIN( 141)								if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 141)									buf->flush();
            								}
HXDLIN( 141)								if (::hx::IsNull( buf->b )) {
HXLINE( 141)									buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            								}
            								else {
HXLINE( 141)									::Array< ::String > buf4 = buf->b;
HXDLIN( 141)									buf4->push(::Std_obj::string(x3));
            								}
            							}
            							else {
HXLINE( 141)								if (::hx::IsNull( buf->charBuf )) {
HXLINE( 141)									buf->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN( 141)								buf->charBuf->push(c4);
            							}
            						}
            						else {
HXLINE( 143)							if (::hx::IsGreater( c,255 )) {
HXLINE( 144)								{
HXLINE( 144)									if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 144)										buf->flush();
            									}
HXDLIN( 144)									if (::hx::IsNull( buf->b )) {
HXLINE( 144)										buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_25,1);
            									}
            									else {
HXLINE( 144)										buf->b->push(HX_("\\u{",c2,35,46,00));
            									}
            								}
HXLINE( 145)								{
HXLINE( 145)									::String x4 = ::Util_obj::hexLower(( (int)(c) ),2);
HXDLIN( 145)									if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 145)										buf->flush();
            									}
HXDLIN( 145)									if (::hx::IsNull( buf->b )) {
HXLINE( 145)										buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            									}
            									else {
HXLINE( 145)										::Array< ::String > buf5 = buf->b;
HXDLIN( 145)										buf5->push(::Std_obj::string(x4));
            									}
            								}
HXLINE( 146)								{
HXLINE( 146)									if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 146)										buf->flush();
            									}
HXDLIN( 146)									if (::hx::IsNull( buf->b )) {
HXLINE( 146)										buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_26,1);
            									}
            									else {
HXLINE( 146)										buf->b->push(HX_("}",7d,00,00,00));
            									}
            								}
            							}
            							else {
HXLINE( 148)								{
HXLINE( 148)									if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 148)										buf->flush();
            									}
HXDLIN( 148)									if (::hx::IsNull( buf->b )) {
HXLINE( 148)										buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_38878422_27,1);
            									}
            									else {
HXLINE( 148)										buf->b->push(HX_("\\x",9c,50,00,00));
            									}
            								}
HXLINE( 149)								{
HXLINE( 149)									::String x5 = ::Util_obj::hexLower((( (int)(c) ) & 255),2);
HXDLIN( 149)									if (::hx::IsNotNull( buf->charBuf )) {
HXLINE( 149)										buf->flush();
            									}
HXDLIN( 149)									if (::hx::IsNull( buf->b )) {
HXLINE( 149)										buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
            									}
            									else {
HXLINE( 149)										::Array< ::String > buf6 = buf->b;
HXDLIN( 149)										buf6->push(::Std_obj::string(x5));
            									}
            								}
            							}
            						}
            					}
            					_hx_goto_15:;
            				}
            			}
            		}
HXLINE( 154)		return buf->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Util_obj,getEscapedString,return )


Util_obj::Util_obj()
{
}

bool Util_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"isJson") ) { outValue = isJson_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getTime") ) { outValue = getTime_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hexLower") ) { outValue = hexLower_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"roundWith") ) { outValue = roundWith_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"exScienceN") ) { outValue = exScienceN_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isPrintable") ) { outValue = isPrintable_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"repeatString") ) { outValue = repeatString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundDecimal") ) { outValue = roundDecimal_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getEscapedString") ) { outValue = getEscapedString_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"convertToReadableTime") ) { outValue = convertToReadableTime_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Util_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Util_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Util_obj::__mClass;

static ::String Util_obj_sStaticFields[] = {
	HX_("getTime",c3,7b,7f,1f),
	HX_("repeatString",8c,aa,6d,42),
	HX_("exScienceN",bd,d9,a4,ca),
	HX_("convertToReadableTime",8b,3f,5d,8e),
	HX_("roundDecimal",e3,a9,4c,b9),
	HX_("roundWith",74,d9,d4,86),
	HX_("isJson",32,07,cf,63),
	HX_("isPrintable",fd,96,08,b5),
	HX_("hexLower",26,ed,76,ab),
	HX_("getEscapedString",7e,48,f7,88),
	::String(null())
};

void Util_obj::__register()
{
	Util_obj _hx_dummy;
	Util_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Util",22,84,87,38);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Util_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Util_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Util_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Util_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Util_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

