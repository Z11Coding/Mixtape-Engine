// Generated by Haxe 4.3.5
#include <hxcpp.h>

#ifndef INCLUDED_crowplexus_iris_InitRules
#include <crowplexus/iris/InitRules.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d062918eaf44742a_10_new,"crowplexus.iris.InitRules","new",0x0430cd48,"crowplexus.iris.InitRules.new","crowplexus/iris/Iris.hx",10,0x27ccb4fa)
namespace crowplexus{
namespace iris{

void InitRules_obj::__construct(::String name, ::Dynamic autoRun, ::Dynamic preset){
            	HX_STACKFRAME(&_hx_pos_d062918eaf44742a_10_new)
HXLINE(  13)		this->preset = true;
HXLINE(  12)		this->autoRun = true;
HXLINE(  11)		this->name = HX_("",00,00,00,00);
HXLINE(  10)		if (::hx::IsNotNull( name )) {
HXDLIN(  10)			this->name = name;
            		}
HXDLIN(  10)		if (::hx::IsNotNull( autoRun )) {
HXDLIN(  10)			this->autoRun = ( (bool)(autoRun) );
            		}
HXDLIN(  10)		if (::hx::IsNotNull( preset )) {
HXDLIN(  10)			this->preset = ( (bool)(preset) );
            		}
            	}

Dynamic InitRules_obj::__CreateEmpty() { return new InitRules_obj; }

void *InitRules_obj::_hx_vtable = 0;

Dynamic InitRules_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InitRules_obj > _hx_result = new InitRules_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool InitRules_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x39d08e50;
}


InitRules_obj::InitRules_obj()
{
}

void InitRules_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InitRules);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(autoRun,"autoRun");
	HX_MARK_MEMBER_NAME(preset,"preset");
	HX_MARK_END_CLASS();
}

void InitRules_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(autoRun,"autoRun");
	HX_VISIT_MEMBER_NAME(preset,"preset");
}

::hx::Val InitRules_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"preset") ) { return ::hx::Val( preset ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autoRun") ) { return ::hx::Val( autoRun ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InitRules_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"preset") ) { preset=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autoRun") ) { autoRun=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InitRules_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("autoRun",1c,cf,7b,9d));
	outFields->push(HX_("preset",5f,b3,c0,ae));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InitRules_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(InitRules_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(InitRules_obj,autoRun),HX_("autoRun",1c,cf,7b,9d)},
	{::hx::fsBool,(int)offsetof(InitRules_obj,preset),HX_("preset",5f,b3,c0,ae)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InitRules_obj_sStaticStorageInfo = 0;
#endif

static ::String InitRules_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("autoRun",1c,cf,7b,9d),
	HX_("preset",5f,b3,c0,ae),
	::String(null()) };

::hx::Class InitRules_obj::__mClass;

void InitRules_obj::__register()
{
	InitRules_obj _hx_dummy;
	InitRules_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.iris.InitRules",56,c9,66,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InitRules_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InitRules_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InitRules_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InitRules_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace iris
