// Generated by Haxe 4.3.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Error
#include <crowplexus/hscript/Error.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_ErrorDef
#include <crowplexus/hscript/ErrorDef.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Expr
#include <crowplexus/hscript/Expr.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Interp
#include <crowplexus/hscript/Interp.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_InterpIterator
#include <crowplexus/hscript/InterpIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1ef43f4d83045305_13_new,"crowplexus.hscript.InterpIterator","new",0x77b00ad9,"crowplexus.hscript.InterpIterator.new","crowplexus/hscript/InterpIterator.hx",13,0x933d2775)
HX_LOCAL_STACK_FRAME(_hx_pos_1ef43f4d83045305_37_hasNext,"crowplexus.hscript.InterpIterator","hasNext",0x56c41066,"crowplexus.hscript.InterpIterator.hasNext","crowplexus/hscript/InterpIterator.hx",37,0x933d2775)
HX_LOCAL_STACK_FRAME(_hx_pos_1ef43f4d83045305_41_next,"crowplexus.hscript.InterpIterator","next",0x4259745a,"crowplexus.hscript.InterpIterator.next","crowplexus/hscript/InterpIterator.hx",41,0x933d2775)
namespace crowplexus{
namespace hscript{

void InterpIterator_obj::__construct( ::crowplexus::hscript::Interp instance, ::crowplexus::hscript::Expr expr1, ::crowplexus::hscript::Expr expr2){
            	HX_GC_STACKFRAME(&_hx_pos_1ef43f4d83045305_13_new)
HXLINE(  14)		 ::Dynamic min = instance->expr(expr1);
HXLINE(  15)		 ::Dynamic max = instance->expr(expr2);
HXLINE(  17)		if (::hx::IsNull( min )) {
HXLINE(  18)			HX_STACK_DO_THROW( ::crowplexus::hscript::Error_obj::__alloc( HX_CTX ,::crowplexus::hscript::ErrorDef_obj::ECustom(HX_("null should be Int",e6,40,45,ba)),instance->curExpr->pmin,instance->curExpr->pmax,instance->curExpr->origin,instance->curExpr->line));
            		}
HXLINE(  19)		if (::hx::IsNull( max )) {
HXLINE(  20)			HX_STACK_DO_THROW( ::crowplexus::hscript::Error_obj::__alloc( HX_CTX ,::crowplexus::hscript::ErrorDef_obj::ECustom(HX_("null should be Int",e6,40,45,ba)),instance->curExpr->pmin,instance->curExpr->pmax,instance->curExpr->origin,instance->curExpr->line));
            		}
HXLINE(  22)		bool _hx_tmp;
HXDLIN(  22)		if (::Std_obj::isOfType(min,::hx::ClassOf< ::Float >())) {
HXLINE(  22)			_hx_tmp = !(::Std_obj::isOfType(min,::hx::ClassOf< int >()));
            		}
            		else {
HXLINE(  22)			_hx_tmp = false;
            		}
HXDLIN(  22)		if (_hx_tmp) {
HXLINE(  23)			HX_STACK_DO_THROW( ::crowplexus::hscript::Error_obj::__alloc( HX_CTX ,::crowplexus::hscript::ErrorDef_obj::ECustom(HX_("Float should be Int",9b,3a,25,fe)),instance->curExpr->pmin,instance->curExpr->pmax,instance->curExpr->origin,instance->curExpr->line));
            		}
HXLINE(  24)		bool _hx_tmp1;
HXDLIN(  24)		if (::Std_obj::isOfType(max,::hx::ClassOf< ::Float >())) {
HXLINE(  24)			_hx_tmp1 = !(::Std_obj::isOfType(max,::hx::ClassOf< int >()));
            		}
            		else {
HXLINE(  24)			_hx_tmp1 = false;
            		}
HXDLIN(  24)		if (_hx_tmp1) {
HXLINE(  25)			HX_STACK_DO_THROW( ::crowplexus::hscript::Error_obj::__alloc( HX_CTX ,::crowplexus::hscript::ErrorDef_obj::ECustom(HX_("Float should be Int",9b,3a,25,fe)),instance->curExpr->pmin,instance->curExpr->pmax,instance->curExpr->origin,instance->curExpr->line));
            		}
HXLINE(  27)		if (!(::Std_obj::isOfType(min,::hx::ClassOf< int >()))) {
HXLINE(  28)			 ::crowplexus::hscript::ErrorDef e = ::crowplexus::hscript::ErrorDef_obj::ECustom(((HX_("",00,00,00,00) + ::Type_obj::getClassName(::Type_obj::getClass(min))) + HX_(" should be Int",1f,e4,6c,17)));
HXDLIN(  28)			HX_STACK_DO_THROW( ::crowplexus::hscript::Error_obj::__alloc( HX_CTX ,e,instance->curExpr->pmin,instance->curExpr->pmax,instance->curExpr->origin,instance->curExpr->line));
            		}
HXLINE(  29)		if (!(::Std_obj::isOfType(max,::hx::ClassOf< int >()))) {
HXLINE(  30)			 ::crowplexus::hscript::ErrorDef e1 = ::crowplexus::hscript::ErrorDef_obj::ECustom(((HX_("",00,00,00,00) + ::Type_obj::getClassName(::Type_obj::getClass(max))) + HX_(" should be Int",1f,e4,6c,17)));
HXDLIN(  30)			HX_STACK_DO_THROW( ::crowplexus::hscript::Error_obj::__alloc( HX_CTX ,e1,instance->curExpr->pmin,instance->curExpr->pmax,instance->curExpr->origin,instance->curExpr->line));
            		}
HXLINE(  32)		this->min = ( (int)(min) );
HXLINE(  33)		this->max = ( (int)(max) );
            	}

Dynamic InterpIterator_obj::__CreateEmpty() { return new InterpIterator_obj; }

void *InterpIterator_obj::_hx_vtable = 0;

Dynamic InterpIterator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InterpIterator_obj > _hx_result = new InterpIterator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool InterpIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d02c4d1;
}

bool InterpIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_1ef43f4d83045305_37_hasNext)
HXDLIN(  37)		return (this->min < this->max);
            	}


HX_DEFINE_DYNAMIC_FUNC0(InterpIterator_obj,hasNext,return )

int InterpIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_1ef43f4d83045305_41_next)
HXDLIN(  41)		return this->min++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InterpIterator_obj,next,return )


::hx::ObjectPtr< InterpIterator_obj > InterpIterator_obj::__new( ::crowplexus::hscript::Interp instance, ::crowplexus::hscript::Expr expr1, ::crowplexus::hscript::Expr expr2) {
	::hx::ObjectPtr< InterpIterator_obj > __this = new InterpIterator_obj();
	__this->__construct(instance,expr1,expr2);
	return __this;
}

::hx::ObjectPtr< InterpIterator_obj > InterpIterator_obj::__alloc(::hx::Ctx *_hx_ctx, ::crowplexus::hscript::Interp instance, ::crowplexus::hscript::Expr expr1, ::crowplexus::hscript::Expr expr2) {
	InterpIterator_obj *__this = (InterpIterator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InterpIterator_obj), false, "crowplexus.hscript.InterpIterator"));
	*(void **)__this = InterpIterator_obj::_hx_vtable;
	__this->__construct(instance,expr1,expr2);
	return __this;
}

InterpIterator_obj::InterpIterator_obj()
{
}

::hx::Val InterpIterator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return ::hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InterpIterator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InterpIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("min",92,11,53,00));
	outFields->push(HX_("max",a4,0a,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InterpIterator_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(InterpIterator_obj,min),HX_("min",92,11,53,00)},
	{::hx::fsInt,(int)offsetof(InterpIterator_obj,max),HX_("max",a4,0a,53,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InterpIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String InterpIterator_obj_sMemberFields[] = {
	HX_("min",92,11,53,00),
	HX_("max",a4,0a,53,00),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	::String(null()) };

::hx::Class InterpIterator_obj::__mClass;

void InterpIterator_obj::__register()
{
	InterpIterator_obj _hx_dummy;
	InterpIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.hscript.InterpIterator",67,aa,91,4f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InterpIterator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InterpIterator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InterpIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InterpIterator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace hscript
