// Generated by Haxe 4.3.5
#include <hxcpp.h>

#ifndef INCLUDED_crowplexus_hscript_EnumValue
#include <crowplexus/hscript/EnumValue.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9caaa3cdca7dc0aa_177_new,"crowplexus.hscript.EnumValue","new",0x049e7abd,"crowplexus.hscript.EnumValue.new","crowplexus/hscript/Tools.hx",177,0x1731c34a)
HX_LOCAL_STACK_FRAME(_hx_pos_9caaa3cdca7dc0aa_183_toString,"crowplexus.hscript.EnumValue","toString",0x426c752f,"crowplexus.hscript.EnumValue.toString","crowplexus/hscript/Tools.hx",183,0x1731c34a)
HX_LOCAL_STACK_FRAME(_hx_pos_9caaa3cdca7dc0aa_189_compare,"crowplexus.hscript.EnumValue","compare",0x1f94b582,"crowplexus.hscript.EnumValue.compare","crowplexus/hscript/Tools.hx",189,0x1731c34a)
namespace crowplexus{
namespace hscript{

void EnumValue_obj::__construct(::String enumName,::String name,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_9caaa3cdca7dc0aa_177_new)
HXLINE( 178)		this->enumName = enumName;
HXLINE( 179)		this->name = name;
HXLINE( 180)		this->args = args;
            	}

Dynamic EnumValue_obj::__CreateEmpty() { return new EnumValue_obj; }

void *EnumValue_obj::_hx_vtable = 0;

Dynamic EnumValue_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EnumValue_obj > _hx_result = new EnumValue_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool EnumValue_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4d825621;
}

::String EnumValue_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_9caaa3cdca7dc0aa_183_toString)
HXLINE( 184)		if (::hx::IsNull( this->args )) {
HXLINE( 185)			return ((this->enumName + HX_(".",2e,00,00,00)) + this->name);
            		}
HXLINE( 186)		::String _hx_tmp = (((this->enumName + HX_(".",2e,00,00,00)) + this->name) + HX_("(",28,00,00,00));
HXDLIN( 186)		::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 186)		{
HXLINE( 186)			int _g1 = 0;
HXDLIN( 186)			::cpp::VirtualArray _g2 = this->args;
HXDLIN( 186)			while((_g1 < _g2->get_length())){
HXLINE( 186)				 ::Dynamic arg = _g2->__get(_g1);
HXDLIN( 186)				_g1 = (_g1 + 1);
HXDLIN( 186)				_g->push(arg);
            			}
            		}
HXDLIN( 186)		return ((_hx_tmp + _g->join(HX_(", ",74,26,00,00))) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(EnumValue_obj,toString,return )

bool EnumValue_obj::compare( ::crowplexus::hscript::EnumValue other){
            	HX_STACKFRAME(&_hx_pos_9caaa3cdca7dc0aa_189_compare)
HXLINE( 190)		bool _hx_tmp;
HXDLIN( 190)		if ((this->enumName == other->enumName)) {
HXLINE( 190)			_hx_tmp = (this->name != other->name);
            		}
            		else {
HXLINE( 190)			_hx_tmp = true;
            		}
HXDLIN( 190)		if (_hx_tmp) {
HXLINE( 191)			return false;
            		}
HXLINE( 192)		bool _hx_tmp1;
HXDLIN( 192)		if (::hx::IsNull( this->args )) {
HXLINE( 192)			_hx_tmp1 = ::hx::IsNull( other->args );
            		}
            		else {
HXLINE( 192)			_hx_tmp1 = false;
            		}
HXDLIN( 192)		if (_hx_tmp1) {
HXLINE( 193)			return true;
            		}
HXLINE( 194)		bool _hx_tmp2;
HXDLIN( 194)		if (::hx::IsNotNull( this->args )) {
HXLINE( 194)			_hx_tmp2 = ::hx::IsNull( other->args );
            		}
            		else {
HXLINE( 194)			_hx_tmp2 = true;
            		}
HXDLIN( 194)		if (_hx_tmp2) {
HXLINE( 195)			return false;
            		}
HXLINE( 196)		if ((this->args->get_length() != other->args->get_length())) {
HXLINE( 197)			return false;
            		}
HXLINE( 199)		{
HXLINE( 199)			int _g = 0;
HXDLIN( 199)			int _g1 = this->args->get_length();
HXDLIN( 199)			while((_g < _g1)){
HXLINE( 199)				_g = (_g + 1);
HXDLIN( 199)				int i = (_g - 1);
HXLINE( 201)				if (::hx::IsNotEq( this->args->__get(i),other->args->__get(i) )) {
HXLINE( 202)					return false;
            				}
            			}
            		}
HXLINE( 205)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EnumValue_obj,compare,return )


EnumValue_obj::EnumValue_obj()
{
}

void EnumValue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EnumValue);
	HX_MARK_MEMBER_NAME(enumName,"enumName");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(args,"args");
	HX_MARK_END_CLASS();
}

void EnumValue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enumName,"enumName");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(args,"args");
}

::hx::Val EnumValue_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"args") ) { return ::hx::Val( args ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return ::hx::Val( compare_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enumName") ) { return ::hx::Val( enumName ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EnumValue_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"args") ) { args=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enumName") ) { enumName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EnumValue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("enumName",ec,1d,67,2d));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("args",5d,8d,74,40));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EnumValue_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(EnumValue_obj,enumName),HX_("enumName",ec,1d,67,2d)},
	{::hx::fsString,(int)offsetof(EnumValue_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(EnumValue_obj,args),HX_("args",5d,8d,74,40)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EnumValue_obj_sStaticStorageInfo = 0;
#endif

static ::String EnumValue_obj_sMemberFields[] = {
	HX_("enumName",ec,1d,67,2d),
	HX_("name",4b,72,ff,48),
	HX_("args",5d,8d,74,40),
	HX_("toString",ac,d0,6e,38),
	HX_("compare",a5,18,69,83),
	::String(null()) };

::hx::Class EnumValue_obj::__mClass;

void EnumValue_obj::__register()
{
	EnumValue_obj _hx_dummy;
	EnumValue_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.hscript.EnumValue",4b,58,49,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EnumValue_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EnumValue_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnumValue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnumValue_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace hscript
