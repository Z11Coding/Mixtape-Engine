package archipelago;

#if sys
import sys.FileSystem;
import sys.io.File;
#end

import flixel.FlxSprite;
import haxe.DynamicAccess;
import haxe.Timer;
import archipelago.Client;
import archipelago.APGameState;
import substates.Prompt;
import flixel.FlxG;
import flixel.FlxState;
import flixel.addons.ui.FlxInputText;
import flixel.text.FlxText;
import flixel.ui.FlxButton;
import flixel.util.FlxColor;
import flixel.util.FlxSave;
import flixel.addons.display.FlxBackdrop;
import flixel.util.FlxGradient;

import yaml.Yaml;
import yaml.Renderer;

typedef APSettings =
{
	var	mods_enabled:Bool;
	var	starting_song:String;
	var	unlock_type:Array<String>;
	var	unlock_method:Array<String>;
	var	songList:Array<String>;
	var	randomize_chart_modifier:Array<String>;
	var	chart_modifier_change_chance:Int;
	var	trap_percentage:Array<Int>;
	var description:String;
	var game:String;
	var name:String;
}

class APEntryState extends FlxState
{
	static final wsCheck = ~/^wss?:\/\//;

	static final APWorld:String = "apworld/fridaynightfunkin.apworld";
	// #if embed
	// @:embed(APWorld) static var apWorldBytes:ByteArray;
	// #end
	private var _hostInput:FlxInputText;
	private var _portInput:FlxInputText;
	private var _slotInput:FlxInputText;
	private var _pwInput:FlxInputText;

	private var _tabOrder:Array<FlxInputText> = [];

	var checker:FlxBackdrop = new FlxBackdrop(Paths.image('mainmenu/Main_Checker'), XY, Std.int(0.2), Std.int(0.2));
	var gradientBar:FlxSprite = new FlxSprite(0, 0).makeGraphic(FlxG.width, 300, 0x83B700FF);
	var swagShader:ColorSwap = null;
	var titleText:FlxText;
	public var pubAP:Client;

	public static var unlockable:Array<String> = [];
	public static var inArchipelagoMode:Bool = false;

	public static var baseGame:Array<String> = 
	[
		'Bopeebo', 'Fresh', 'Dad Battle',
	 	'Spookeez', 'South', 'Monster',
	 	'Pico', 'Philly Nice', 'Blammed',
	 	'Satin Panties', 'High', 'Milf',
	 	'Cocoa', 'Eggnog', 'Winter Horrorland',
	 	'Senpai', 'Roses', 'Thorns',
	 	'Ugh', 'Guns', 'Stress',
	 	'Darnell', 'Lit Up', '2Hot', 'Blazin',
		'Darnell (BF Mix)'
	];

	public static var baseErect:Array<String> = 
	[
		'Bopeebo Erect', 'Fresh Erect', 'Dad Battle Erect',
	 	'Spookeez Erect', 'South Erect',
	 	'Pico Erect', 'Philly Nice Erect', 'Blammed Erect',
	 	'Satin Panties Erect', 'High Erect',
	 	'Cocoa Erect', 'Eggnog Erect',
	 	'Senpai Erect', 'Roses Erect', 'Thorns Erect',
	 	'Ugh Erect'
	];

	public static var basePico:Array<String> = 
	[
		'Bopeebo (Pico mix)', 'Fresh (Pico mix)', 'Dad Battle (Pico mix)',
	 	'Spookeez (Pico mix)', 'South (Pico mix)',
	 	'Pico (Pico mix)', 'Philly Nice (Pico mix)', 'Blammed (Pico mix)',
	 	'Eggnog (Pico mix)',
	 	'Ugh (Pico mix)', 'Guns (Pico mix)'
	];

	public static var secrets:Array<String> = [
		'Small Argument', 
		'Beat Battle', 
		'Beat Battle 2'
	];

	 //So we have a general idea of what to put in the yaml
	public static var gameSettings:APSettings = {
		mods_enabled: false,
		starting_song: 'Tutorial',
		unlock_type: ['Songs', 'Weeks'],
		unlock_method: ['Note Checks', 'Song Completion'],
		songList: ['Note Checks', 'Song Completion'],
		randomize_chart_modifier: ['Always', 'Sometimes', 'Never'],
		chart_modifier_change_chance: 0,
		trap_percentage: [0, 0, 0],
		description: 'Generated by Funkipelago for Friday Night Funkin',
		game: 'Friday Night Funkin',
		name: 'Player'
	};

	override function create()
	{
		Cursor.show();
		Cursor.cursorMode = Default;
		swagShader = new ColorSwap();

		// TODO: save last game's settings as default; Reset button to return to base default
		var FNF = new FlxSave();
		FNF.bind("FNF");
		var lastGame:DynamicAccess<String> = FNF.data.lastGame;
		if (lastGame == null)
			lastGame = {
				server: "archipelago.gg",
				port: "38281",
				slot: "Player"
			};
		FNF.destroy();

		var bg = new FlxSprite().loadGraphic(Paths.image("menuBG"));
		bg.screenCenter();
		add(bg);

		if (!ClientPrefs.data.lowQuality)
		{
			gradientBar = FlxGradient.createGradientFlxSprite(Math.round(FlxG.width), 512, [0x00ff0000, 0x675967E4, 0xFD62FF19], 1, 90, true);
			gradientBar.y = FlxG.height - gradientBar.height;
			add(gradientBar);
			gradientBar.scrollFactor.set(0, 0);

			add(checker);
			checker.scrollFactor.set(0, 0.07);
		}

		titleText = new FlxText(20, 0, 0, "FRIDAY NIGHT FUNKIN: ARCHIPELAGO", 22);
		titleText.setFormat(Paths.font("FridayNightFunkin.ttf"), 32, FlxColor.BLACK);
		titleText.alignment = CENTER;
		titleText.screenCenter(X);
		add(titleText);
		titleText.shader = swagShader.shader;

		var playButton = new FlxButton(0, 0, "Play", onPlay);
		playButton.onUp.sound = FlxG.sound.load(Paths.sound('confirmMenu'));
		playButton.x = (FlxG.width / 2) - 10 - playButton.width;
		playButton.y = FlxG.height - playButton.height - 10;
		add(playButton);

		var backButton = new FlxButton(0, 0, "Back", onBack);
		backButton.onUp.sound = FlxG.sound.load(Paths.sound('cancelMenu'));
		backButton.x = (FlxG.width / 2) + 10;
		backButton.y = FlxG.height - backButton.height - 10;
		add(backButton);

		var hostLabel = new FlxText(FlxG.width / 2 - 100, 80, 0, "Host", 12);
		_hostInput = new FlxInputText(FlxG.width / 2, 80, 150, lastGame["server"], 12, FlxColor.WHITE, FlxColor.GRAY);
		add(hostLabel);
		add(_hostInput);

		var portLabel = new FlxText(FlxG.width / 2 - 100, 100, 0, "Port", 12);
		_portInput = new FlxInputText(FlxG.width / 2, 100, 150, lastGame["port"], 12, FlxColor.WHITE, FlxColor.GRAY);
		_portInput.filterMode = FlxInputText.ONLY_NUMERIC;
		_portInput.maxLength = 6;
		add(portLabel);
		add(_portInput);

		var slotLabel = new FlxText(FlxG.width / 2 - 100, 120, 0, "Slot name", 12);
		_slotInput = new FlxInputText(FlxG.width / 2, 120, 150, lastGame["slot"], 12, FlxColor.WHITE, FlxColor.GRAY);
		add(slotLabel);
		add(_slotInput);

		var pwLabel = new FlxText(FlxG.width / 2 - 100, 140, 0, "Password", 12);
		_pwInput = new FlxInputText(FlxG.width / 2, 140, 150, "", 12, FlxColor.WHITE, FlxColor.GRAY);
		_pwInput.passwordMode = true;
		add(pwLabel);
		add(_pwInput);

		_tabOrder = [_hostInput, _portInput, _slotInput, _pwInput];

		super.create();

		#if sys
		var apWorldButtonText = FileSystem.exists("C:/ProgramData/Archipelago/custom_worlds/fridaynightfunkin.apworld") ? "Update APWorld" : "Install APWorld";
		var apWorldButton = new FlxButton(0, 0, apWorldButtonText, installAPWorld);
		apWorldButton.onUp.sound = FlxG.sound.load(Paths.sound('clickText'));
		apWorldButton.x = (FlxG.width / 2) - 10 - apWorldButton.width;
		apWorldButton.y = FlxG.height - apWorldButton.height - 50;
		add(apWorldButton);
		#end

		var yamlGen = new FlxButton(0, 0, "Generate YAML", onGenYaml);
		yamlGen.onUp.sound = FlxG.sound.load(Paths.sound('clickText'));
		yamlGen.x = (FlxG.width / 2) + 10 + yamlGen.width;
		yamlGen.y = FlxG.height - yamlGen.height - 10;
		add(yamlGen);
	}

    var daReason:String = "man idk";
    function errDesc(a:String) {
        switch (a)
        {
            case 'noHost':
                daReason = "Host name cannot be empty. (That's the address of the server you're connecting to.)";

            case 'noPort':
                daReason = "Port number cannot be empty. (That's the 4-5 digits at the end of the server address, often 38281.)";

            case 'portNonNumeric':
                daReason = "Port must be numeric.";

            case 'portOutOfRange':
                daReason = "Port should be a number from 1 to 65535 (most likely 38281).";

            case 'noSlot':
                daReason = "Slot name cannot be empty. (That's your name on your YAML configuration file.)";

            case 'InvalidSlot':
                daReason = "That player isn't listed for this server instance.";

            case 'InvalidGame':
                daReason = "That Player isn't listed as a Friday Night Funkin slot.";

            case 'IncompatibleVersion':
                daReason = "The server is expecting a newer version of the game. Please ensure you're running the latest version.";

            case 'InvalidPassword':
                daReason = "The password supplied is incorrect.";

            case 'InvalidItemsHandling':
                daReason = "Please report a bug stating that an \"InvalidItemsHandling\" error was received.";

            case 'connectionReset':
                daReason = "The server closed the connection.";

            case 'badHostFormat':
                daReason = "Please check the value entered as Host. The format is invalid.";

            case 'unknownHost':
                daReason = "No server was found at \""+_hostInput.text+"\".";

            case 'default':
                daReason = "Slot name cannot be empty. (That's your name on your YAML configuration file.)";
        }
        return daReason;
    }

	function onRoomInfo():Void {
		trace("Got room info - sending connect packet");

		#if debug
		var tags = ["AP", "Testing"];
		#else
		var tags = ["AP", "Testing"];
		#end
		pubAP.ConnectSlot(_slotInput.text, _pwInput.text.length > 0 ? _pwInput.text : null, 0x7, tags, {major: 0, minor: 5, build: 0});
	}

	function onSlotRefused(errors:Array<String>):Void {
		inArchipelagoMode = false;
		trace("Slot refused", errors);
		closeSubState();
		switch (errors[0])
		{
			case x = "InvalidSlot" | "InvalidGame": postError(x, ["name" => _slotInput.text]);
			case x = "IncompatibleVersion" | "InvalidPassword" | "InvalidItemsHandling": postError(x);
			case x: postError("default", ["error" => x]);
		}
	}

	function onSocketDisconnected():Void
	{
		inArchipelagoMode = false;
		polltimer.stop();
		trace("Disconnected");
		closeSubState();
		postError("connectionReset");
	}

	function onSlotConnected(slotData:Dynamic):Void
	{
		trace("Connected - switching to game state");
			polltimer.stop();
			pubAP.onRoomInfo.remove(onRoomInfo);
			pubAP.onSlotRefused.remove(onSlotRefused);
			pubAP.onSocketDisconnected.remove(onSocketDisconnected);
			pubAP.onSlotConnected.remove(onSlotConnected);
			closeSubState();
			inArchipelagoMode = true;
			var FNF = new FlxSave();
			FNF.bind("FNF");
			FNF.data.lastGame = {
				server: _hostInput.text,
				port: _portInput.text,
				slot: _slotInput.text
			};
			FNF.close();

			//FlxG.switchState(new APGameState(ap, slotData));
			runArch();
	}

	public static function installAPWorld():Void
	{
		#if sys
		var programDataPath = "C:/ProgramData/Archipelago/";
		var launcherPath = programDataPath + "ArchipelagoLauncher.exe";
		var customWorldsPath = programDataPath + "custom_worlds/";
		var apWorldFile = customWorldsPath + "fridaynightfunkin.apworld";

		if (FileSystem.exists(launcherPath))
		{
			trace("ArchipelagoLauncher found. Installing or updating .apworld file.");
			// Create a temp file to run with the system.
			var apworld = haxe.Resource.getBytes("apworld");
			File.saveBytes("_temp/fridaynightfunkin.apworld", apworld);
			Sys.command("cmd /c start _temp/fridaynightfunkin.apworld");
			FileSystem.deleteDirectory("_temp");
		}
		else
		{
			trace("Archipelago was not found. Please install Archipelago to install the .apworld file.");
		}
		#end
	}

	inline function postError(str:String, ?vars:Map<String, Dynamic>)
		openSubState(new Prompt("Error: " + errDesc(str), 0, null, null, false));

	var polltimer = new Timer(50);
	function onPlay()
	{

		var port = Std.parseInt(_portInput.text);
		if (_hostInput.text == "")
			postError('noHost');
		else if (_portInput.text == "")
			postError('noPort');
		else if (!~/^\d+$/.match(_portInput.text))
			postError('portNonNumeric');
		else if (port <= 0 || port > 65535)
			postError('portOutOfRange');
		else if (_slotInput.text == "")
			postError('noSlot');
		else
		{
			FlxG.autoPause = false;
			var connectSubState = new APConnectingSubState();
			var uri = '${_hostInput.text}:${_portInput.text}';
			if (!wsCheck.match(uri))
				uri = 'ws://$uri';

			openSubState(connectSubState);
			connectSubState.closeCallback = () ->
			{
				FlxG.autoPause = true;
			};

			var ap = new Client('FNF-${_slotInput.text}', "Friday Night Funkin", uri);

			ap.onRoomInfo.add(onRoomInfo);
			ap.onSlotRefused.add(onSlotRefused);
			polltimer.run = ap.poll;
			ap.onSocketDisconnected.add(onSocketDisconnected);
			ap.onSlotConnected.add(onSlotConnected);

			connectSubState.onCancel.add(() ->
			{
				inArchipelagoMode = false;
				polltimer.stop();
				ap.disconnect_socket();
			});
			pubAP = ap;
		}
	}

	function onBack()
	{
		FlxG.switchState(new states.MainMenuState());
	}

	function onGenYaml()
	{
		var gameSettings = gameSettings;
		gameSettings.songList = baseGame;
		for (erect in baseErect)
			gameSettings.songList.push(erect);
		for (pico in basePico)
			gameSettings.songList.push(pico);
		for (i in 0...WeekData.weeksList.length) {
			var leWeek:WeekData = WeekData.weeksLoaded.get(WeekData.weeksList[i]);
			
			for (song in leWeek.songs)
			{
				gameSettings.songList.remove(song[0]); // To remove dups
				gameSettings.songList.push(song[0]);
				gameSettings.songList.remove('Tutorial'); // To remove Tutorial because it keeps re-adding itself
			}
		}
		var document = Yaml.render(gameSettings);
		trace(document);

		#if sys
		// This time write that same document to disk and adjust the flow level giving
		// a more compact result.
		if (!FileSystem.exists("./PlayerSettings/"))
			FileSystem.createDirectory("./PlayerSettings/");
		Yaml.write("PlayerSettings/" + _slotInput.text + ".yaml", gameSettings, Renderer.options().setFlowLevel(1));
		#end
		openSubState(new Prompt("Settings Exported Successfully!", 0, null, null, false));
	}

	function runArch():Void // Soon
	{
		inArchipelagoMode = true;
		WeekData.reloadWeekFiles(false);
		FlxG.save.data.closeDuringOverRide = false;
		FlxG.save.data.manualOverride = false;
		FlxG.save.flush();
		unlockable = baseGame;
		for (erect in baseErect)
			unlockable.push(erect);
		for (pico in basePico)
			unlockable.push(pico);
		for (i in 0...WeekData.weeksList.length) {
			var leWeek:WeekData = WeekData.weeksLoaded.get(WeekData.weeksList[i]);
			
			for (song in leWeek.songs)
			{
				unlockable.remove(song[0]); // To remove dups
				unlockable.push(song[0]);
				unlockable.remove('Tutorial'); // To remove Tutorial because it keeps re-adding itself
			}
		}
		FlxG.save.data.manualOverride = false;
		FlxG.save.data.storyWeek = null;
		FlxG.save.data.currentModDirectory = null;
		FlxG.save.data.difficulties = null; // just in case
		FlxG.save.data.SONG = null;
		FlxG.save.data.storyDifficulty = null;
		FlxG.save.data.songPos = null;
		FlxG.save.flush();
		// unlockable = unlockable.removeDuplicates();
		MusicBeatState.switchState(new states.CategoryState());
	}

	override function update(elapsed:Float)
	{
		if (FlxG.keys.justPressed.HOME) runArch();
		if(swagShader != null) swagShader.hue += 0.45 / (ClientPrefs.data.framerate / 60);
		if (!ClientPrefs.data.lowQuality)
		{
			checker.x -= 0.45 / (ClientPrefs.data.framerate / 60);
			checker.y -= 0.16 / (ClientPrefs.data.framerate / 60);
		}
		super.update(elapsed);
	}
}
